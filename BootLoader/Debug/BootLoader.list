
BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004268  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004480  08004480  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004488  08004488  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000005c  080044ec  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  080044ec  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efa7  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a38  00000000  00000000  0002f076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00031ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2c  00000000  00000000  00032930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b25  00000000  00000000  0003345c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001287e  00000000  00000000  0004af81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e377  00000000  00000000  0005d7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fe4  00000000  00000000  000ebb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000efb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043f0 	.word	0x080043f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080043f0 	.word	0x080043f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <BL_UART_Fetch_Host_Command>:
		CBL_OTP_READ_CMD,
		CBL_CHANGE_ROP_Level_CMD
};
/*Software Interface Definitions*/
BL_Status BL_UART_Fetch_Host_Command(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
	BL_Status status=BL_NACK;
 8000582:	2300      	movs	r3, #0
 8000584:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_status=HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	71bb      	strb	r3, [r7, #6]
	u8 Data_Length=0;
 800058a:	2300      	movs	r3, #0
 800058c:	717b      	strb	r3, [r7, #5]
	memset(BL_HOST_BUFFER,0,BL_HOST_BUFFER_RX_LENGTH);
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	2100      	movs	r1, #0
 8000592:	4826      	ldr	r0, [pc, #152]	; (800062c <BL_UART_Fetch_Host_Command+0xb0>)
 8000594:	f003 faa8 	bl	8003ae8 <memset>
	HAL_status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_HOST_BUFFER, 1, 1000);
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	2201      	movs	r2, #1
 800059e:	4923      	ldr	r1, [pc, #140]	; (800062c <BL_UART_Fetch_Host_Command+0xb0>)
 80005a0:	4823      	ldr	r0, [pc, #140]	; (8000630 <BL_UART_Fetch_Host_Command+0xb4>)
 80005a2:	f002 fefc 	bl	800339e <HAL_UART_Receive>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71bb      	strb	r3, [r7, #6]
	if(HAL_status!=HAL_OK)
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <BL_UART_Fetch_Host_Command+0x3a>
	{
		status=BL_NACK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	e035      	b.n	8000622 <BL_UART_Fetch_Host_Command+0xa6>
	}
	else
	{
		Data_Length=BL_HOST_BUFFER[0];
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <BL_UART_Fetch_Host_Command+0xb0>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	717b      	strb	r3, [r7, #5]
		HAL_status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_HOST_BUFFER[1],Data_Length, 1000);
 80005bc:	797b      	ldrb	r3, [r7, #5]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c4:	491b      	ldr	r1, [pc, #108]	; (8000634 <BL_UART_Fetch_Host_Command+0xb8>)
 80005c6:	481a      	ldr	r0, [pc, #104]	; (8000630 <BL_UART_Fetch_Host_Command+0xb4>)
 80005c8:	f002 fee9 	bl	800339e <HAL_UART_Receive>
 80005cc:	4603      	mov	r3, r0
 80005ce:	71bb      	strb	r3, [r7, #6]
		if(HAL_status!=HAL_OK)
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <BL_UART_Fetch_Host_Command+0x60>
		{
			status=BL_NACK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	e022      	b.n	8000622 <BL_UART_Fetch_Host_Command+0xa6>
		}
		else
		{
			switch(BL_HOST_BUFFER[1])
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <BL_UART_Fetch_Host_Command+0xb0>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	2b16      	cmp	r3, #22
 80005e2:	d012      	beq.n	800060a <BL_UART_Fetch_Host_Command+0x8e>
 80005e4:	2b16      	cmp	r3, #22
 80005e6:	dc16      	bgt.n	8000616 <BL_UART_Fetch_Host_Command+0x9a>
 80005e8:	2b12      	cmp	r3, #18
 80005ea:	d002      	beq.n	80005f2 <BL_UART_Fetch_Host_Command+0x76>
 80005ec:	2b15      	cmp	r3, #21
 80005ee:	d006      	beq.n	80005fe <BL_UART_Fetch_Host_Command+0x82>
 80005f0:	e011      	b.n	8000616 <BL_UART_Fetch_Host_Command+0x9a>
			case CBL_GET_HELP_CMD:
				Bootloader_Get_Help(BL_HOST_BUFFER);
				status=BL_OK;
				break;*/
			case CBL_GET_CID_CMD:
				Bootloader_Get_Chip_Identification_Number(BL_HOST_BUFFER);
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <BL_UART_Fetch_Host_Command+0xb0>)
 80005f4:	f000 f8b2 	bl	800075c <Bootloader_Get_Chip_Identification_Number>
				status=BL_OK;
 80005f8:	2301      	movs	r3, #1
 80005fa:	71fb      	strb	r3, [r7, #7]
				break;
 80005fc:	e011      	b.n	8000622 <BL_UART_Fetch_Host_Command+0xa6>
				Bootloader_Jump_To_Address(BL_HOST_BUFFER);
				status=BL_OK;
				break;*/
			case CBL_FLASH_ERASE_CMD:

				Bootloader_Erase_Flash(BL_HOST_BUFFER);
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <BL_UART_Fetch_Host_Command+0xb0>)
 8000600:	f000 f97d 	bl	80008fe <Bootloader_Erase_Flash>
				status=BL_OK;
 8000604:	2301      	movs	r3, #1
 8000606:	71fb      	strb	r3, [r7, #7]
				break;
 8000608:	e00b      	b.n	8000622 <BL_UART_Fetch_Host_Command+0xa6>
			case CBL_MEM_WRITE_CMD:
				Bootloader_Memory_Write(BL_HOST_BUFFER);
 800060a:	4808      	ldr	r0, [pc, #32]	; (800062c <BL_UART_Fetch_Host_Command+0xb0>)
 800060c:	f000 fa11 	bl	8000a32 <Bootloader_Memory_Write>
				status=BL_OK;
 8000610:	2301      	movs	r3, #1
 8000612:	71fb      	strb	r3, [r7, #7]
				break;
 8000614:	e005      	b.n	8000622 <BL_UART_Fetch_Host_Command+0xa6>
				Bootloader_Change_Read_Protection_Level(BL_HOST_BUFFER);
				status=BL_OK;
				break;
				 */
			default:
				BL_Print_Message("Invalid Command Code Received From Host!!\r\n");
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <BL_UART_Fetch_Host_Command+0xbc>)
 8000618:	f000 fa6c 	bl	8000af4 <BL_Print_Message>
				status=BL_OK;
 800061c:	2301      	movs	r3, #1
 800061e:	71fb      	strb	r3, [r7, #7]
				break;
 8000620:	bf00      	nop
			}
		}
	}
	return status;
 8000622:	79fb      	ldrb	r3, [r7, #7]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000078 	.word	0x20000078
 8000630:	200001e0 	.word	0x200001e0
 8000634:	20000079 	.word	0x20000079
 8000638:	08004408 	.word	0x08004408

0800063c <Bootloader_Jump_To_User_App>:
/*Static function Definition*/
void Bootloader_Jump_To_User_App(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	/*value of the main Stack Pointer of our main Application*/
	//u32 MSP_Value =*((volatile u32*)(FLASH_SECTOR2_BASE_ADDRESS));
	/*Reset Handler Definition Function of Our Main Application*/
	u32 MainAppAddr =*((volatile u32*)(FLASH_SECTOR2_BASE_ADDRESS+4));
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <Bootloader_Jump_To_User_App+0x20>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	607b      	str	r3, [r7, #4]
	/* Fetch the reset handler address of the user application */
	pMainApp ResetHandler_Address = (pMainApp)MainAppAddr;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	603b      	str	r3, [r7, #0]

	/*Set Main Stack Pointer*/
	//__set_MSP(MSP_Value);
	/*DeInitialize of Modules*/
	HAL_RCC_DeInit();/*Resets the RCC clock configuration to the default reset state.*/
 800064c:	f002 f87c 	bl	8002748 <HAL_RCC_DeInit>
	/*Jump To Application Reset Handler*/
	ResetHandler_Address();
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	4798      	blx	r3

}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08008004 	.word	0x08008004

08000660 <Bootloader_CRC_Verify>:
static u8 Bootloader_CRC_Verify(u8 *pData ,u32 Data_Length,u32 Host_CRC)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
	u8 Local_CRC_Status=CRC_VERIFICATION_FAILED;
 800066c:	2300      	movs	r3, #0
 800066e:	77fb      	strb	r3, [r7, #31]
	u32 MCU_CRC_Calculated = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
	u8 data_counter=0;
 8000674:	2300      	movs	r3, #0
 8000676:	75fb      	strb	r3, [r7, #23]
	u32 Data_Buffer=0;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
	/*Calculate CRC32*/
	for(data_counter = 0;data_counter<Data_Length;data_counter++)
 800067c:	2300      	movs	r3, #0
 800067e:	75fb      	strb	r3, [r7, #23]
 8000680:	e00f      	b.n	80006a2 <Bootloader_CRC_Verify+0x42>
	{
		Data_Buffer=(u32)pData[data_counter];
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE, &Data_Buffer, 1);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	4810      	ldr	r0, [pc, #64]	; (80006d8 <Bootloader_CRC_Verify+0x78>)
 8000696:	f000 ff10 	bl	80014ba <HAL_CRC_Accumulate>
 800069a:	61b8      	str	r0, [r7, #24]
	for(data_counter = 0;data_counter<Data_Length;data_counter++)
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	3301      	adds	r3, #1
 80006a0:	75fb      	strb	r3, [r7, #23]
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d8eb      	bhi.n	8000682 <Bootloader_CRC_Verify+0x22>
	}
	/*Reset CRC Calculation Unit*/
	__HAL_CRC_DR_RESET(CRC_ENGINE);
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <Bootloader_CRC_Verify+0x78>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <Bootloader_CRC_Verify+0x78>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f042 0201 	orr.w	r2, r2, #1
 80006b8:	609a      	str	r2, [r3, #8]
	/*Compare the HOST CRC To The Calculated one*/
	if(MCU_CRC_Calculated == Host_CRC)
 80006ba:	69ba      	ldr	r2, [r7, #24]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d102      	bne.n	80006c8 <Bootloader_CRC_Verify+0x68>
	{
		Local_CRC_Status=CRC_VERIFICATION_APPROVED;
 80006c2:	2301      	movs	r3, #1
 80006c4:	77fb      	strb	r3, [r7, #31]
 80006c6:	e001      	b.n	80006cc <Bootloader_CRC_Verify+0x6c>
	}
	else
	{
		Local_CRC_Status=CRC_VERIFICATION_FAILED;
 80006c8:	2300      	movs	r3, #0
 80006ca:	77fb      	strb	r3, [r7, #31]
	}
	return Local_CRC_Status;
 80006cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000140 	.word	0x20000140

080006dc <Bootloader_send_Ack>:
static void Bootloader_send_Ack(u8 Send_u8ReplayLen)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	u8 ACK_Value[2]={0};
 80006e6:	2300      	movs	r3, #0
 80006e8:	81bb      	strh	r3, [r7, #12]
	ACK_Value[0]= CBL_SEND_ACK;
 80006ea:	23cd      	movs	r3, #205	; 0xcd
 80006ec:	733b      	strb	r3, [r7, #12]
	ACK_Value[1]= Send_u8ReplayLen;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART,(u8 *)ACK_Value,2, 1000);
 80006f2:	f107 010c 	add.w	r1, r7, #12
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	2202      	movs	r2, #2
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <Bootloader_send_Ack+0x30>)
 80006fe:	f002 fdbc 	bl	800327a <HAL_UART_Transmit>
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200001e0 	.word	0x200001e0

08000710 <Bootloader_send_NAck>:
static void Bootloader_send_NAck(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	u8 ACK_Value=CBL_SEND_NACK;
 8000716:	23ab      	movs	r3, #171	; 0xab
 8000718:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART,&ACK_Value,1, 1000);
 800071a:	1df9      	adds	r1, r7, #7
 800071c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000720:	2201      	movs	r2, #1
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <Bootloader_send_NAck+0x20>)
 8000724:	f002 fda9 	bl	800327a <HAL_UART_Transmit>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200001e0 	.word	0x200001e0

08000734 <Bootloader_Send_Data_To_Host>:
static void Bootloader_Send_Data_To_Host(u8 *Host_Buffer,u32 Data_Len)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, Data_Len, 1000);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b29a      	uxth	r2, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	4803      	ldr	r0, [pc, #12]	; (8000758 <Bootloader_Send_Data_To_Host+0x24>)
 800074a:	f002 fd96 	bl	800327a <HAL_UART_Transmit>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200001e0 	.word	0x200001e0

0800075c <Bootloader_Get_Chip_Identification_Number>:
		Bootloader_send_NAck();
	}
}
 */
static void Bootloader_Get_Chip_Identification_Number(u8 *Host_Buffer)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	u16 HOST_CMD_PACKET_LENGTH=0;
 8000764:	2300      	movs	r3, #0
 8000766:	82fb      	strh	r3, [r7, #22]
	u32 HOST_CRC32=0; //32bit 4byte to store CRC
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
	u16 MCU_Identification_Number=0;
 800076c:	2300      	movs	r3, #0
 800076e:	81fb      	strh	r3, [r7, #14]
#if(BL_DEBUG_ENABLE==DEBUG_INFO_ENABLE)
	BL_Print_Message("Read The MCU Chip Identification Number\r\n");
#endif
	/*EXTRACT THE CRC32 AND PACKET LENGTH SENT BY THE HOST*/
	HOST_CMD_PACKET_LENGTH=Host_Buffer[0]+1;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b29b      	uxth	r3, r3
 8000776:	3301      	adds	r3, #1
 8000778:	82fb      	strh	r3, [r7, #22]
	HOST_CRC32=*((u32 *)((Host_Buffer+HOST_CMD_PACKET_LENGTH)-CRC_TYPE_SIZE_BYTE));
 800077a:	8afb      	ldrh	r3, [r7, #22]
 800077c:	3b04      	subs	r3, #4
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	613b      	str	r3, [r7, #16]
	/*CRC Verification*/
	if (CRC_VERIFICATION_APPROVED == Bootloader_CRC_Verify((u8*)&Host_Buffer[0], HOST_CMD_PACKET_LENGTH-4, HOST_CRC32))
 8000786:	8afb      	ldrh	r3, [r7, #22]
 8000788:	3b04      	subs	r3, #4
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	4619      	mov	r1, r3
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff66 	bl	8000660 <Bootloader_CRC_Verify>
 8000794:	4603      	mov	r3, r0
 8000796:	2b01      	cmp	r3, #1
 8000798:	d112      	bne.n	80007c0 <Bootloader_Get_Chip_Identification_Number+0x64>
#if(BL_DEBUG_ENABLE==DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed\r\n");
#endif
		/*GET The MCU Chip Identification Number*/
		/*Report The MCU Chip Identification Number to host */
		MCU_Identification_Number =(u16)(DBGMCU->IDCODE)&0x00000FFF;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <Bootloader_Get_Chip_Identification_Number+0x70>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	81fb      	strh	r3, [r7, #14]
		Bootloader_send_Ack(2);
 80007a8:	2002      	movs	r0, #2
 80007aa:	f7ff ff97 	bl	80006dc <Bootloader_send_Ack>
		Bootloader_Send_Data_To_Host((u8*)&MCU_Identification_Number,2);
 80007ae:	f107 030e 	add.w	r3, r7, #14
 80007b2:	2102      	movs	r1, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffbd 	bl	8000734 <Bootloader_Send_Data_To_Host>
		Bootloader_Jump_To_User_App();
 80007ba:	f7ff ff3f 	bl	800063c <Bootloader_Jump_To_User_App>
#if(BL_DEBUG_ENABLE==DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed\r\n");
#endif
		Bootloader_send_NAck();
	}
}
 80007be:	e001      	b.n	80007c4 <Bootloader_Get_Chip_Identification_Number+0x68>
		Bootloader_send_NAck();
 80007c0:	f7ff ffa6 	bl	8000710 <Bootloader_send_NAck>
}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	e0042000 	.word	0xe0042000

080007d0 <Host_Address_Verification>:
	}
}

 */
static uint8_t Host_Address_Verification(uint32_t Jump_Address)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F401_FLASH_END)){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007e2:	d306      	bcc.n	80007f2 <Host_Address_Verification+0x22>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a0d      	ldr	r2, [pc, #52]	; (800081c <Host_Address_Verification+0x4c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d802      	bhi.n	80007f2 <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
 80007f0:	e00c      	b.n	800080c <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F401_FLASH_END)){
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80007f8:	d306      	bcc.n	8000808 <Host_Address_Verification+0x38>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <Host_Address_Verification+0x4c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d802      	bhi.n	8000808 <Host_Address_Verification+0x38>
		Address_Verification = ADDRESS_IS_VALID;
 8000802:	2301      	movs	r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	e001      	b.n	800080c <Host_Address_Verification+0x3c>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 8000808:	2300      	movs	r3, #0
 800080a:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	08040000 	.word	0x08040000

08000820 <Perform_Flash_Erase>:
	}

}
 */
static u8 Perform_Flash_Erase(u8 Sector_Number,u8 Number_Of_Sectors)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
	u8 Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000830:	2300      	movs	r3, #0
 8000832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FLASH_EraseInitTypeDef pEraseInit;
	u8 Remaining_Sectors = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	u32 SectorError = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]

	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER){
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	2b06      	cmp	r3, #6
 800084a:	d903      	bls.n	8000854 <Perform_Flash_Erase+0x34>
		/* Number Of sectors is out of range */
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000852:	e04e      	b.n	80008f2 <Perform_Flash_Erase+0xd2>
	}
	else{
		if((Sector_Number <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Number))
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b05      	cmp	r3, #5
 8000858:	d902      	bls.n	8000860 <Perform_Flash_Erase+0x40>
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2bff      	cmp	r3, #255	; 0xff
 800085e:	d145      	bne.n	80008ec <Perform_Flash_Erase+0xcc>
		{
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Number)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2bff      	cmp	r3, #255	; 0xff
 8000864:	d102      	bne.n	800086c <Perform_Flash_Erase+0x4c>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 8000866:	2301      	movs	r3, #1
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	e012      	b.n	8000892 <Perform_Flash_Erase+0x72>
			{
				/* User needs Sector erase */
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("User needs Sector erase \r\n");
#endif
				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Number;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f1c3 0306 	rsb	r3, r3, #6
 8000872:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				//Sector_Number =4 , Number_Of_Sector=6   4->10
				//i have only 0->7 Sector Remaining_Sectors =8-4=4 (6>4) Number_Of_Sector=4
				if(Number_Of_Sectors > Remaining_Sectors)
 8000876:	79ba      	ldrb	r2, [r7, #6]
 8000878:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800087c:	429a      	cmp	r2, r3
 800087e:	d902      	bls.n	8000886 <Perform_Flash_Erase+0x66>
				{
					Number_Of_Sectors = Remaining_Sectors;
 8000880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000884:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }

				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Number;        /* Initial FLASH sector to erase when Mass erase is disabled */
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	61fb      	str	r3, [r7, #28]
			}

			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]

			/*Unlock Flash Control Register Access*/
			HAL_Status = HAL_FLASH_Unlock();
 800089a:	f000 fe8d 	bl	80015b8 <HAL_FLASH_Unlock>
 800089e:	4603      	mov	r3, r0
 80008a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if(HAL_Status != HAL_OK)
 80008a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d003      	beq.n	80008b4 <Perform_Flash_Erase+0x94>
			{
				Sector_Validity_Status=UNSUCCESSFUL_ERASE;;
 80008ac:	2302      	movs	r3, #2
 80008ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(HAL_Status != HAL_OK)
 80008b2:	e01e      	b.n	80008f2 <Perform_Flash_Erase+0xd2>
			}
			else{

				/* Perform a mass erase or erase the specified FLASH memory sectors */
				HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80008b4:	f107 020c 	add.w	r2, r7, #12
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 ffec 	bl	800189c <HAL_FLASHEx_Erase>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				//(0xFFFFFFFFU means that all the sectors have been correctly erased)
				if(SectorError == HAL_SUCCESSFUL_ERASE)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d0:	d103      	bne.n	80008da <Perform_Flash_Erase+0xba>
				{
					Sector_Validity_Status=SUCCESSFUL_ERASE;
 80008d2:	2303      	movs	r3, #3
 80008d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008d8:	e002      	b.n	80008e0 <Perform_Flash_Erase+0xc0>
				}
				else
				{
					Sector_Validity_Status=UNSUCCESSFUL_ERASE;
 80008da:	2302      	movs	r3, #2
 80008dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				/*Lock Flash Control Register Access*/
				HAL_Status =HAL_FLASH_Lock();
 80008e0:	f000 fe8c 	bl	80015fc <HAL_FLASH_Lock>
 80008e4:	4603      	mov	r3, r0
 80008e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if(HAL_Status != HAL_OK)
 80008ea:	e002      	b.n	80008f2 <Perform_Flash_Erase+0xd2>
			}
		}
		else
		{
			Sector_Validity_Status=UNSUCCESSFUL_ERASE;
 80008ec:	2302      	movs	r3, #2
 80008ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

	}
	return Sector_Validity_Status;
 80008f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <Bootloader_Erase_Flash>:
static void Bootloader_Erase_Flash(uint8_t *Host_Buffer){
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	u16 Host_CMD_Packet_Len = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	82fb      	strh	r3, [r7, #22]
	u32 Host_CRC32 = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
	u8 Erase_Status = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	73fb      	strb	r3, [r7, #15]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Mass erase or sector erase of the user flash \r\n");
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b29b      	uxth	r3, r3
 8000918:	3301      	adds	r3, #1
 800091a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32=*((u32 *)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 800091c:	8afb      	ldrh	r3, [r7, #22]
 800091e:	3b04      	subs	r3, #4
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_APPROVED == Bootloader_CRC_Verify((u8 *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000928:	8afb      	ldrh	r3, [r7, #22]
 800092a:	3b04      	subs	r3, #4
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4619      	mov	r1, r3
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fe95 	bl	8000660 <Bootloader_CRC_Verify>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d11f      	bne.n	800097c <Bootloader_Erase_Flash+0x7e>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		/* Send acknowledgment to the HOST */
		Bootloader_send_Ack(1);
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fecd 	bl	80006dc <Bootloader_send_Ack>
		/* Perform Mass erase or sector erase of the user flash */
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3302      	adds	r3, #2
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3303      	adds	r3, #3
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4619      	mov	r1, r3
 8000950:	4610      	mov	r0, r2
 8000952:	f7ff ff65 	bl	8000820 <Perform_Flash_Erase>
 8000956:	4603      	mov	r3, r0
 8000958:	73fb      	strb	r3, [r7, #15]
		if(SUCCESSFUL_ERASE == Erase_Status){
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d106      	bne.n	800096e <Bootloader_Erase_Flash+0x70>
			/* Report erase Passed */
			Bootloader_Send_Data_To_Host((u8 *)&Erase_Status, 1);
 8000960:	f107 030f 	add.w	r3, r7, #15
 8000964:	2101      	movs	r1, #1
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fee4 	bl	8000734 <Bootloader_Send_Data_To_Host>
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		/* Send Not acknowledge to the HOST */
		Bootloader_send_NAck();
	}
}
 800096c:	e008      	b.n	8000980 <Bootloader_Erase_Flash+0x82>
			Bootloader_Send_Data_To_Host((u8 *)&Erase_Status, 1);
 800096e:	f107 030f 	add.w	r3, r7, #15
 8000972:	2101      	movs	r1, #1
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fedd 	bl	8000734 <Bootloader_Send_Data_To_Host>
}
 800097a:	e001      	b.n	8000980 <Bootloader_Erase_Flash+0x82>
		Bootloader_send_NAck();
 800097c:	f7ff fec8 	bl	8000710 <Bootloader_send_NAck>
}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <Flash_Memory_Write_Payload>:
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	4613      	mov	r3, r2
 8000994:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800099a:	2300      	movs	r3, #0
 800099c:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	82bb      	strh	r3, [r7, #20]

	/* Unlock the FLASH control register access */
	HAL_Status = HAL_FLASH_Unlock();
 80009a2:	f000 fe09 	bl	80015b8 <HAL_FLASH_Unlock>
 80009a6:	4603      	mov	r3, r0
 80009a8:	75fb      	strb	r3, [r7, #23]

	if(HAL_Status != HAL_OK){
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <Flash_Memory_Write_Payload+0x2e>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80009b0:	2300      	movs	r3, #0
 80009b2:	75bb      	strb	r3, [r7, #22]
 80009b4:	e023      	b.n	80009fe <Flash_Memory_Write_Payload+0x76>
	}
	else{
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 80009b6:	2300      	movs	r3, #0
 80009b8:	82bb      	strh	r3, [r7, #20]
 80009ba:	e01c      	b.n	80009f6 <Flash_Memory_Write_Payload+0x6e>
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Payload_Start_Address + Payload_Counter, Host_Payload[Payload_Counter]);
 80009bc:	8aba      	ldrh	r2, [r7, #20]
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	18d1      	adds	r1, r2, r3
 80009c2:	8abb      	ldrh	r3, [r7, #20]
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	461c      	mov	r4, r3
 80009d0:	4615      	mov	r5, r2
 80009d2:	4622      	mov	r2, r4
 80009d4:	462b      	mov	r3, r5
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 fd9a 	bl	8001510 <HAL_FLASH_Program>
 80009dc:	4603      	mov	r3, r0
 80009de:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK){
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d002      	beq.n	80009ec <Flash_Memory_Write_Payload+0x64>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80009e6:	2300      	movs	r3, #0
 80009e8:	75bb      	strb	r3, [r7, #22]
				break;
 80009ea:	e008      	b.n	80009fe <Flash_Memory_Write_Payload+0x76>
			}
			else{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 80009ec:	2301      	movs	r3, #1
 80009ee:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 80009f0:	8abb      	ldrh	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	82bb      	strh	r3, [r7, #20]
 80009f6:	8aba      	ldrh	r2, [r7, #20]
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3de      	bcc.n	80009bc <Flash_Memory_Write_Payload+0x34>
			}
		}
	}

	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 80009fe:	7dbb      	ldrb	r3, [r7, #22]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d10f      	bne.n	8000a24 <Flash_Memory_Write_Payload+0x9c>
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10c      	bne.n	8000a24 <Flash_Memory_Write_Payload+0x9c>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000a0a:	f000 fdf7 	bl	80015fc <HAL_FLASH_Lock>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK){
 8000a12:	7dfb      	ldrb	r3, [r7, #23]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <Flash_Memory_Write_Payload+0x96>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000a1c:	e004      	b.n	8000a28 <Flash_Memory_Write_Payload+0xa0>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000a22:	e001      	b.n	8000a28 <Flash_Memory_Write_Payload+0xa0>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000a24:	2300      	movs	r3, #0
 8000a26:	75bb      	strb	r3, [r7, #22]
	}

	return Flash_Payload_Write_Status;
 8000a28:	7dbb      	ldrb	r3, [r7, #22]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bdb0      	pop	{r4, r5, r7, pc}

08000a32 <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write(uint8_t *Host_Buffer){
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
	uint32_t HOST_Address = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	72fb      	strb	r3, [r7, #11]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	72bb      	strb	r3, [r7, #10]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	727b      	strb	r3, [r7, #9]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Write data into different memories of the MCU \r\n");
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3301      	adds	r3, #1
 8000a5a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000a5c:	8afb      	ldrh	r3, [r7, #22]
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_APPROVED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000a68:	8afb      	ldrh	r3, [r7, #22]
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff fdf5 	bl	8000660 <Bootloader_CRC_Verify>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d135      	bne.n	8000ae8 <Bootloader_Memory_Write+0xb6>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		/* Send acknowledgement to the HOST */
		Bootloader_send_Ack(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff fe2d 	bl	80006dc <Bootloader_send_Ack>
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a88:	60fb      	str	r3, [r7, #12]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("HOST_Address = 0x%X \r\n", HOST_Address);
#endif
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	799b      	ldrb	r3, [r3, #6]
 8000a8e:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f7ff fe9d 	bl	80007d0 <Host_Address_Verification>
 8000a96:	4603      	mov	r3, r0
 8000a98:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000a9a:	7abb      	ldrb	r3, [r7, #10]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d11a      	bne.n	8000ad6 <Bootloader_Memory_Write+0xa4>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3307      	adds	r3, #7
 8000aa4:	7afa      	ldrb	r2, [r7, #11]
 8000aa6:	b292      	uxth	r2, r2
 8000aa8:	68f9      	ldr	r1, [r7, #12]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff6c 	bl	8000988 <Flash_Memory_Write_Payload>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	727b      	strb	r3, [r7, #9]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 8000ab4:	7a7b      	ldrb	r3, [r7, #9]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d106      	bne.n	8000ac8 <Bootloader_Memory_Write+0x96>
				/* Report payload write passed */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000aba:	f107 0309 	add.w	r3, r7, #9
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fe37 	bl	8000734 <Bootloader_Send_Data_To_Host>
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		/* Send Not acknowledge to the HOST */
		Bootloader_send_NAck();
	}
}
 8000ac6:	e011      	b.n	8000aec <Bootloader_Memory_Write+0xba>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000ac8:	f107 0309 	add.w	r3, r7, #9
 8000acc:	2101      	movs	r1, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fe30 	bl	8000734 <Bootloader_Send_Data_To_Host>
}
 8000ad4:	e00a      	b.n	8000aec <Bootloader_Memory_Write+0xba>
			Address_Verification = ADDRESS_IS_INVALID;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000ada:	f107 030a 	add.w	r3, r7, #10
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe27 	bl	8000734 <Bootloader_Send_Data_To_Host>
}
 8000ae6:	e001      	b.n	8000aec <Bootloader_Memory_Write+0xba>
		Bootloader_send_NAck();
 8000ae8:	f7ff fe12 	bl	8000710 <Bootloader_send_NAck>
}
 8000aec:	bf00      	nop
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <BL_Print_Message>:

}
//static void Bootloader_Disable_RW_Protection(u8 *Host_Buffer){}
 */
void BL_Print_Message(char *format,...)
{
 8000af4:	b40f      	push	{r0, r1, r2, r3}
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b09a      	sub	sp, #104	; 0x68
 8000afa:	af00      	add	r7, sp, #0
	char Message[100]={0};
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2260      	movs	r2, #96	; 0x60
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 ffed 	bl	8003ae8 <memset>
	//Hold the information needed by va_start,va_end,va_arg
	va_list args;
	//Enables access to the Variable arguments
	va_start(args,format);
 8000b0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b12:	603b      	str	r3, [r7, #0]
	//Write Formatted data from variable argument list to string
	vsprintf(Message,format,args);
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 ffda 	bl	8003ad4 <vsiprintf>
#if (BL_DEBUG_METHOD==BL_ENABLE_UART_DEBUG_MESSAGE)
	//Transmit the Formatted data through the defined UART
	HAL_UART_Transmit(BL_DEBUG_UART, (u8*)Message, sizeof(Message), 1000);
 8000b20:	1d39      	adds	r1, r7, #4
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	2264      	movs	r2, #100	; 0x64
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <BL_Print_Message+0x48>)
 8000b2a:	f002 fba6 	bl	800327a <HAL_UART_Transmit>
#else
#error "Wrong BL Configuration Method"
#endif
	//Perform Cleanup for app object initalized by a call to va_start
	va_end(args);
}
 8000b2e:	bf00      	nop
 8000b30:	3768      	adds	r7, #104	; 0x68
 8000b32:	46bd      	mov	sp, r7
 8000b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr
 8000b3c:	2000019c 	.word	0x2000019c

08000b40 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_CRC_Init+0x20>)
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <MX_CRC_Init+0x24>)
 8000b48:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_CRC_Init+0x20>)
 8000b4c:	f000 fc99 	bl	8001482 <HAL_CRC_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b56:	f000 f8e1 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000140 	.word	0x20000140
 8000b64:	40023000 	.word	0x40023000

08000b68 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <HAL_CRC_MspInit+0x3c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d10d      	bne.n	8000b96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_CRC_MspInit+0x40>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <HAL_CRC_MspInit+0x40>)
 8000b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_CRC_MspInit+0x40>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023000 	.word	0x40023000
 8000ba8:	40023800 	.word	0x40023800

08000bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_GPIO_Init+0x30>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <MX_GPIO_Init+0x30>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_GPIO_Init+0x30>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BL_Status Status = BL_NACK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bea:	f000 fac7 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bee:	f000 f829 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
	//RCC_AHB1ENR_GPIOAEN
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf2:	f7ff ffdb 	bl	8000bac <MX_GPIO_Init>
  MX_CRC_Init();
 8000bf6:	f7ff ffa3 	bl	8000b40 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000bfa:	f000 f9c5 	bl	8000f88 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000bfe:	f000 f9ed 	bl	8000fdc <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000c02:	f000 f94b 	bl	8000e9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	// Start the timer with interrupt
	//HAL_TIM_Base_Start_IT(&htim3);
	//Recieve flag to syop timer if the host is sending data
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2102      	movs	r1, #2
 8000c0a:	480b      	ldr	r0, [pc, #44]	; (8000c38 <main+0x58>)
 8000c0c:	f001 f8ec 	bl	8001de8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim3);
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <main+0x5c>)
 8000c12:	f001 feb7 	bl	8002984 <HAL_TIM_Base_Start_IT>
	//HAL_TIM_Base_Stop_IT(&htim3);
	while (1)
	{
		Status=BL_UART_Fetch_Host_Command();
 8000c16:	f7ff fcb1 	bl	800057c <BL_UART_Fetch_Host_Command>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
		//		if (1==flag && Recieve_flag ==Recieve_NOK)
		//		{
		//			Bootloader_Jump_To_User_App();
		//		}b

		if(BL_OK ==Status)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d102      	bne.n	8000c2a <main+0x4a>
		{
			HAL_TIM_Base_Start_IT(&htim3);
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <main+0x5c>)
 8000c26:	f001 fead 	bl	8002984 <HAL_TIM_Base_Start_IT>

		}
		if (1==flag)
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <main+0x60>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d1f1      	bne.n	8000c16 <main+0x36>
		{
			Bootloader_Jump_To_User_App();
 8000c32:	f7ff fd03 	bl	800063c <Bootloader_Jump_To_User_App>
		Status=BL_UART_Fetch_Host_Command();
 8000c36:	e7ee      	b.n	8000c16 <main+0x36>
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	20000154 	.word	0x20000154
 8000c40:	20000148 	.word	0x20000148

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	; 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2230      	movs	r2, #48	; 0x30
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 ff48 	bl	8003ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <SystemClock_Config+0xd4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <SystemClock_Config+0xd4>)
 8000c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <SystemClock_Config+0xd4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cac:	2310      	movs	r3, #16
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000cbc:	2354      	movs	r3, #84	; 0x54
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 f8a5 	bl	8001e1c <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cd8:	f000 f820 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	230f      	movs	r3, #15
 8000cde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fb06 	bl	800230c <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d06:	f000 f809 	bl	8000d1c <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3750      	adds	r7, #80	; 0x50
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 fa2c 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <TIM3_IRQHandler+0x34>)
 8000dd2:	f001 fe68 	bl	8002aa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	timer_counter++;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <TIM3_IRQHandler+0x38>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <TIM3_IRQHandler+0x38>)
 8000dde:	6013      	str	r3, [r2, #0]
	if(timer_counter>=229)//229
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <TIM3_IRQHandler+0x38>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2be4      	cmp	r3, #228	; 0xe4
 8000de6:	d908      	bls.n	8000dfa <TIM3_IRQHandler+0x2e>
	{
		flag=1;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <TIM3_IRQHandler+0x3c>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
		timer_counter=0;
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <TIM3_IRQHandler+0x38>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim3);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM3_IRQHandler+0x34>)
 8000df6:	f001 fe27 	bl	8002a48 <HAL_TIM_Base_Stop_IT>
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000154 	.word	0x20000154
 8000e04:	2000014c 	.word	0x2000014c
 8000e08:	20000148 	.word	0x20000148

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f002 fe5c 	bl	8003af8 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20010000 	.word	0x20010000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	20000150 	.word	0x20000150
 8000e74:	20000390 	.word	0x20000390

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000eba:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <MX_TIM3_Init+0x98>)
 8000ebc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000ec0:	2253      	movs	r2, #83	; 0x53
 8000ec2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ede:	4814      	ldr	r0, [pc, #80]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000ee0:	f001 fd00 	bl	80028e4 <HAL_TIM_Base_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000eea:	f7ff ff17 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000efc:	f001 fedb 	bl	8002cb6 <HAL_TIM_ConfigClockSource>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f06:	f7ff ff09 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f12:	463b      	mov	r3, r7
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <MX_TIM3_Init+0x94>)
 8000f18:	f002 f8e0 	bl	80030dc <HAL_TIMEx_MasterConfigSynchronization>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f22:	f7ff fefb 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000154 	.word	0x20000154
 8000f34:	40000400 	.word	0x40000400

08000f38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_TIM_Base_MspInit+0x48>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d115      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_TIM_Base_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <HAL_TIM_Base_MspInit+0x4c>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_TIM_Base_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	201d      	movs	r0, #29
 8000f6c:	f000 fa53 	bl	8001416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f70:	201d      	movs	r0, #29
 8000f72:	f000 fa6c 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40000400 	.word	0x40000400
 8000f84:	40023800 	.word	0x40023800

08000f88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_USART2_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	f002 f90e 	bl	80031e0 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fca:	f7ff fea7 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000019c 	.word	0x2000019c
 8000fd8:	40004400 	.word	0x40004400

08000fdc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_USART6_UART_Init+0x4c>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_USART6_UART_Init+0x50>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_USART6_UART_Init+0x4c>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_USART6_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_USART6_UART_Init+0x4c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_USART6_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_USART6_UART_Init+0x4c>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_USART6_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_USART6_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_USART6_UART_Init+0x4c>)
 8001014:	f002 f8e4 	bl	80031e0 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800101e:	f7ff fe7d 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001e0 	.word	0x200001e0
 800102c:	40011400 	.word	0x40011400

08001030 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a32      	ldr	r2, [pc, #200]	; (8001118 <HAL_UART_MspInit+0xe8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12c      	bne.n	80010ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_UART_MspInit+0xec>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a30      	ldr	r2, [pc, #192]	; (800111c <HAL_UART_MspInit+0xec>)
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_UART_MspInit+0xec>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_UART_MspInit+0xec>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a29      	ldr	r2, [pc, #164]	; (800111c <HAL_UART_MspInit+0xec>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <HAL_UART_MspInit+0xec>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800108a:	230c      	movs	r3, #12
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800109a:	2307      	movs	r3, #7
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	481e      	ldr	r0, [pc, #120]	; (8001120 <HAL_UART_MspInit+0xf0>)
 80010a6:	f000 fd1b 	bl	8001ae0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80010aa:	e031      	b.n	8001110 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <HAL_UART_MspInit+0xf4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d12c      	bne.n	8001110 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_UART_MspInit+0xec>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a17      	ldr	r2, [pc, #92]	; (800111c <HAL_UART_MspInit+0xec>)
 80010c0:	f043 0320 	orr.w	r3, r3, #32
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0xec>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_UART_MspInit+0xec>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <HAL_UART_MspInit+0xec>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_UART_MspInit+0xec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001100:	2308      	movs	r3, #8
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_UART_MspInit+0xf0>)
 800110c:	f000 fce8 	bl	8001ae0 <HAL_GPIO_Init>
}
 8001110:	bf00      	nop
 8001112:	3730      	adds	r7, #48	; 0x30
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40004400 	.word	0x40004400
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000
 8001124:	40011400 	.word	0x40011400

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800112e:	490e      	ldr	r1, [pc, #56]	; (8001168 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001144:	4c0b      	ldr	r4, [pc, #44]	; (8001174 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001152:	f7ff fe91 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f002 fcd5 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fd41 	bl	8000be0 <main>
  bx  lr    
 800115e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001168:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800116c:	08004490 	.word	0x08004490
  ldr r2, =_sbss
 8001170:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001174:	20000390 	.word	0x20000390

08001178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_Init+0x40>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_Init+0x40>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_Init+0x40>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f92b 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f808 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fdba 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f943 	bl	800146a <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f000 f90b 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	20000008 	.word	0x20000008
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008
 8001244:	20000224 	.word	0x20000224

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000224 	.word	0x20000224

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	; (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff8e 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff29 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff3e 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff8e 	bl	8001354 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff31 	bl	80012c4 <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e00e      	b.n	80014b2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	795b      	ldrb	r3, [r3, #5]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fb5f 	bl	8000b68 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b087      	sub	sp, #28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2202      	movs	r2, #2
 80014ce:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e00a      	b.n	80014ec <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	441a      	add	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3f0      	bcc.n	80014d6 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2201      	movs	r2, #1
 8001500:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001502:	693b      	ldr	r3, [r7, #16]
}
 8001504:	4618      	mov	r0, r3
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_FLASH_Program+0xa0>)
 8001524:	7e1b      	ldrb	r3, [r3, #24]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_FLASH_Program+0x1e>
 800152a:	2302      	movs	r3, #2
 800152c:	e03b      	b.n	80015a6 <HAL_FLASH_Program+0x96>
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_FLASH_Program+0xa0>)
 8001530:	2201      	movs	r2, #1
 8001532:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001534:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001538:	f000 f870 	bl	800161c <FLASH_WaitForLastOperation>
 800153c:	4603      	mov	r3, r0
 800153e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d12b      	bne.n	800159e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800154c:	783b      	ldrb	r3, [r7, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	68b8      	ldr	r0, [r7, #8]
 8001552:	f000 f91b 	bl	800178c <FLASH_Program_Byte>
 8001556:	e016      	b.n	8001586 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d105      	bne.n	800156a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800155e:	883b      	ldrh	r3, [r7, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	68b8      	ldr	r0, [r7, #8]
 8001564:	f000 f8ee 	bl	8001744 <FLASH_Program_HalfWord>
 8001568:	e00d      	b.n	8001586 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d105      	bne.n	800157c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	4619      	mov	r1, r3
 8001574:	68b8      	ldr	r0, [r7, #8]
 8001576:	f000 f8c3 	bl	8001700 <FLASH_Program_Word>
 800157a:	e004      	b.n	8001586 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800157c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001580:	68b8      	ldr	r0, [r7, #8]
 8001582:	f000 f88b 	bl	800169c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001586:	f24c 3050 	movw	r0, #50000	; 0xc350
 800158a:	f000 f847 	bl	800161c <FLASH_WaitForLastOperation>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_FLASH_Program+0xa4>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_FLASH_Program+0xa4>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HAL_FLASH_Program+0xa0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000228 	.word	0x20000228
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_FLASH_Unlock+0x38>)
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da0b      	bge.n	80015e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_FLASH_Unlock+0x38>)
 80015cc:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <HAL_FLASH_Unlock+0x3c>)
 80015ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_FLASH_Unlock+0x38>)
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_FLASH_Unlock+0x40>)
 80015d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_FLASH_Unlock+0x38>)
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da01      	bge.n	80015e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80015e2:	79fb      	ldrb	r3, [r7, #7]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40023c00 	.word	0x40023c00
 80015f4:	45670123 	.word	0x45670123
 80015f8:	cdef89ab 	.word	0xcdef89ab

080015fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_FLASH_Lock+0x1c>)
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_FLASH_Lock+0x1c>)
 8001606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800160a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40023c00 	.word	0x40023c00

0800161c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <FLASH_WaitForLastOperation+0x78>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800162e:	f7ff fe0b 	bl	8001248 <HAL_GetTick>
 8001632:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001634:	e010      	b.n	8001658 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d00c      	beq.n	8001658 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <FLASH_WaitForLastOperation+0x38>
 8001644:	f7ff fe00 	bl	8001248 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	d201      	bcs.n	8001658 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e019      	b.n	800168c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <FLASH_WaitForLastOperation+0x7c>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e8      	bne.n	8001636 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <FLASH_WaitForLastOperation+0x7c>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <FLASH_WaitForLastOperation+0x7c>)
 8001672:	2201      	movs	r2, #1
 8001674:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <FLASH_WaitForLastOperation+0x7c>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001682:	f000 f8a5 	bl	80017d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
  
}  
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000228 	.word	0x20000228
 8001698:	40023c00 	.word	0x40023c00

0800169c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <FLASH_Program_DoubleWord+0x60>)
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	4a13      	ldr	r2, [pc, #76]	; (80016fc <FLASH_Program_DoubleWord+0x60>)
 80016ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <FLASH_Program_DoubleWord+0x60>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	4a10      	ldr	r2, [pc, #64]	; (80016fc <FLASH_Program_DoubleWord+0x60>)
 80016ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <FLASH_Program_DoubleWord+0x60>)
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <FLASH_Program_DoubleWord+0x60>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80016d2:	f3bf 8f6f 	isb	sy
}
 80016d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80016d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	000a      	movs	r2, r1
 80016e6:	2300      	movs	r3, #0
 80016e8:	68f9      	ldr	r1, [r7, #12]
 80016ea:	3104      	adds	r1, #4
 80016ec:	4613      	mov	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40023c00 	.word	0x40023c00

08001700 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <FLASH_Program_Word+0x40>)
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	4a0c      	ldr	r2, [pc, #48]	; (8001740 <FLASH_Program_Word+0x40>)
 8001710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001714:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <FLASH_Program_Word+0x40>)
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	4a09      	ldr	r2, [pc, #36]	; (8001740 <FLASH_Program_Word+0x40>)
 800171c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001720:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <FLASH_Program_Word+0x40>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	4a06      	ldr	r2, [pc, #24]	; (8001740 <FLASH_Program_Word+0x40>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	601a      	str	r2, [r3, #0]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40023c00 	.word	0x40023c00

08001744 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <FLASH_Program_HalfWord+0x44>)
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <FLASH_Program_HalfWord+0x44>)
 8001756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800175a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <FLASH_Program_HalfWord+0x44>)
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	4a09      	ldr	r2, [pc, #36]	; (8001788 <FLASH_Program_HalfWord+0x44>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <FLASH_Program_HalfWord+0x44>)
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <FLASH_Program_HalfWord+0x44>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	801a      	strh	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <FLASH_Program_Byte+0x40>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <FLASH_Program_Byte+0x40>)
 800179e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <FLASH_Program_Byte+0x40>)
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <FLASH_Program_Byte+0x40>)
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <FLASH_Program_Byte+0x40>)
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <FLASH_Program_Byte+0x40>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	78fa      	ldrb	r2, [r7, #3]
 80017bc:	701a      	strb	r2, [r3, #0]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00

080017d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80017d4:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	4a2b      	ldr	r2, [pc, #172]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 80017ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 80017ee:	2210      	movs	r2, #16
 80017f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 8001808:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 800180c:	2220      	movs	r2, #32
 800180e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 8001826:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 800182a:	2240      	movs	r2, #64	; 0x40
 800182c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	4a15      	ldr	r2, [pc, #84]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 8001844:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d009      	beq.n	800186c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 8001862:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 8001866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f043 0320 	orr.w	r3, r3, #32
 8001880:	4a05      	ldr	r2, [pc, #20]	; (8001898 <FLASH_SetErrorCode+0xc8>)
 8001882:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <FLASH_SetErrorCode+0xc4>)
 8001886:	2202      	movs	r2, #2
 8001888:	60da      	str	r2, [r3, #12]
  }
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40023c00 	.word	0x40023c00
 8001898:	20000228 	.word	0x20000228

0800189c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <HAL_FLASHEx_Erase+0xd8>)
 80018b0:	7e1b      	ldrb	r3, [r3, #24]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_FLASHEx_Erase+0x1e>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e058      	b.n	800196c <HAL_FLASHEx_Erase+0xd0>
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_FLASHEx_Erase+0xd8>)
 80018bc:	2201      	movs	r2, #1
 80018be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018c4:	f7ff feaa 	bl	800161c <FLASH_WaitForLastOperation>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d148      	bne.n	8001964 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d115      	bne.n	800190e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4619      	mov	r1, r3
 80018ee:	4610      	mov	r0, r2
 80018f0:	f000 f844 	bl	800197c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018f8:	f7ff fe90 	bl	800161c <FLASH_WaitForLastOperation>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_FLASHEx_Erase+0xdc>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_FLASHEx_Erase+0xdc>)
 8001906:	f023 0304 	bic.w	r3, r3, #4
 800190a:	6113      	str	r3, [r2, #16]
 800190c:	e028      	b.n	8001960 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	e01c      	b.n	8001950 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4619      	mov	r1, r3
 800191e:	68b8      	ldr	r0, [r7, #8]
 8001920:	f000 f850 	bl	80019c4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001924:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001928:	f7ff fe78 	bl	800161c <FLASH_WaitForLastOperation>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_FLASHEx_Erase+0xdc>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_FLASHEx_Erase+0xdc>)
 8001936:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800193a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	601a      	str	r2, [r3, #0]
          break;
 8001948:	e00a      	b.n	8001960 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3301      	adds	r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4413      	add	r3, r2
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	429a      	cmp	r2, r3
 800195e:	d3da      	bcc.n	8001916 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001960:	f000 f878 	bl	8001a54 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_FLASHEx_Erase+0xd8>)
 8001966:	2200      	movs	r2, #0
 8001968:	761a      	strb	r2, [r3, #24]

  return status;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000228 	.word	0x20000228
 8001978:	40023c00 	.word	0x40023c00

0800197c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <FLASH_MassErase+0x44>)
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <FLASH_MassErase+0x44>)
 800198e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001992:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <FLASH_MassErase+0x44>)
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <FLASH_MassErase+0x44>)
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <FLASH_MassErase+0x44>)
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	4313      	orrs	r3, r2
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <FLASH_MassErase+0x44>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b0:	6113      	str	r3, [r2, #16]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e010      	b.n	8001a02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d103      	bne.n	80019ee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80019e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e009      	b.n	8001a02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d103      	bne.n	80019fc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80019f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e002      	b.n	8001a02 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80019fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <FLASH_Erase_Sector+0x8c>)
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <FLASH_Erase_Sector+0x8c>)
 8001a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <FLASH_Erase_Sector+0x8c>)
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	490f      	ldr	r1, [pc, #60]	; (8001a50 <FLASH_Erase_Sector+0x8c>)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <FLASH_Erase_Sector+0x8c>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <FLASH_Erase_Sector+0x8c>)
 8001a20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <FLASH_Erase_Sector+0x8c>)
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <FLASH_Erase_Sector+0x8c>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <FLASH_Erase_Sector+0x8c>)
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <FLASH_Erase_Sector+0x8c>)
 8001a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a42:	6113      	str	r3, [r2, #16]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d017      	beq.n	8001a94 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001a6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001a76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a16      	ldr	r2, [pc, #88]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a92:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d017      	beq.n	8001ad0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aaa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <FLASH_FlushCaches+0x88>)
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ace:	6013      	str	r3, [r2, #0]
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023c00 	.word	0x40023c00

08001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	e159      	b.n	8001db0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 8148 	bne.w	8001daa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d005      	beq.n	8001b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d130      	bne.n	8001b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 0201 	and.w	r2, r3, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d017      	beq.n	8001bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d123      	bne.n	8001c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	220f      	movs	r2, #15
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	08da      	lsrs	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3208      	adds	r2, #8
 8001c1e:	69b9      	ldr	r1, [r7, #24]
 8001c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0203 	and.w	r2, r3, #3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80a2 	beq.w	8001daa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_GPIO_Init+0x2e8>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a56      	ldr	r2, [pc, #344]	; (8001dc8 <HAL_GPIO_Init+0x2e8>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b54      	ldr	r3, [pc, #336]	; (8001dc8 <HAL_GPIO_Init+0x2e8>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c82:	4a52      	ldr	r2, [pc, #328]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a49      	ldr	r2, [pc, #292]	; (8001dd0 <HAL_GPIO_Init+0x2f0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d019      	beq.n	8001ce2 <HAL_GPIO_Init+0x202>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_GPIO_Init+0x2f4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0x1fe>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a47      	ldr	r2, [pc, #284]	; (8001dd8 <HAL_GPIO_Init+0x2f8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <HAL_GPIO_Init+0x1fa>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a46      	ldr	r2, [pc, #280]	; (8001ddc <HAL_GPIO_Init+0x2fc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <HAL_GPIO_Init+0x1f6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a45      	ldr	r2, [pc, #276]	; (8001de0 <HAL_GPIO_Init+0x300>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_GPIO_Init+0x1f2>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	e008      	b.n	8001ce4 <HAL_GPIO_Init+0x204>
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x204>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e004      	b.n	8001ce4 <HAL_GPIO_Init+0x204>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x204>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x204>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	f002 0203 	and.w	r2, r2, #3
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4093      	lsls	r3, r2
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf4:	4935      	ldr	r1, [pc, #212]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_GPIO_Init+0x304>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d26:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <HAL_GPIO_Init+0x304>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_GPIO_Init+0x304>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d50:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <HAL_GPIO_Init+0x304>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_GPIO_Init+0x304>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d7a:	4a1a      	ldr	r2, [pc, #104]	; (8001de4 <HAL_GPIO_Init+0x304>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_GPIO_Init+0x304>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da4:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <HAL_GPIO_Init+0x304>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3301      	adds	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b0f      	cmp	r3, #15
 8001db4:	f67f aea2 	bls.w	8001afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40013c00 	.word	0x40013c00

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e04:	e003      	b.n	8001e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e267      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d075      	beq.n	8001f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3a:	4b88      	ldr	r3, [pc, #544]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d00c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d112      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e52:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e5e:	d10b      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	4b7e      	ldr	r3, [pc, #504]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d05b      	beq.n	8001f24 <HAL_RCC_OscConfig+0x108>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d157      	bne.n	8001f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e242      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d106      	bne.n	8001e90 <HAL_RCC_OscConfig+0x74>
 8001e82:	4b76      	ldr	r3, [pc, #472]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a75      	ldr	r2, [pc, #468]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xb0>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x98>
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6f      	ldr	r2, [pc, #444]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b6d      	ldr	r3, [pc, #436]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6c      	ldr	r2, [pc, #432]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xb0>
 8001eb4:	4b69      	ldr	r3, [pc, #420]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a68      	ldr	r2, [pc, #416]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b66      	ldr	r3, [pc, #408]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a65      	ldr	r2, [pc, #404]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f9b8 	bl	8001248 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff f9b4 	bl	8001248 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e207      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xc0>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff f9a4 	bl	8001248 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff f9a0 	bl	8001248 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1f3      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b51      	ldr	r3, [pc, #324]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0xe8>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f32:	4b4a      	ldr	r3, [pc, #296]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b44      	ldr	r3, [pc, #272]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x152>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1c7      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4937      	ldr	r1, [pc, #220]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e03a      	b.n	8001ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_OscConfig+0x244>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7ff f959 	bl	8001248 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7ff f955 	bl	8001248 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1a8      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4925      	ldr	r1, [pc, #148]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x244>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7ff f938 	bl	8001248 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f934 	bl	8001248 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e187      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d036      	beq.n	8002074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d016      	beq.n	800203c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_RCC_OscConfig+0x248>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7ff f918 	bl	8001248 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff f914 	bl	8001248 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e167      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x240>)
 8002030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x200>
 800203a:	e01b      	b.n	8002074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_OscConfig+0x248>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7ff f901 	bl	8001248 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	e00e      	b.n	8002068 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204a:	f7ff f8fd 	bl	8001248 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d907      	bls.n	8002068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e150      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
 800205c:	40023800 	.word	0x40023800
 8002060:	42470000 	.word	0x42470000
 8002064:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800206a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ea      	bne.n	800204a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8097 	beq.w	80021b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10f      	bne.n	80020b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	4b7d      	ldr	r3, [pc, #500]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a7c      	ldr	r2, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b7a      	ldr	r3, [pc, #488]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	4b77      	ldr	r3, [pc, #476]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d118      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020be:	4b74      	ldr	r3, [pc, #464]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a73      	ldr	r2, [pc, #460]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ca:	f7ff f8bd 	bl	8001248 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7ff f8b9 	bl	8001248 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e10c      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_OscConfig+0x474>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x2ea>
 80020f8:	4b64      	ldr	r3, [pc, #400]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a63      	ldr	r2, [pc, #396]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	e01c      	b.n	8002140 <HAL_RCC_OscConfig+0x324>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b05      	cmp	r3, #5
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x30c>
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a5e      	ldr	r2, [pc, #376]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	4b5c      	ldr	r3, [pc, #368]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a5b      	ldr	r2, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0x324>
 8002128:	4b58      	ldr	r3, [pc, #352]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	4b55      	ldr	r3, [pc, #340]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a54      	ldr	r2, [pc, #336]	; (800228c <HAL_RCC_OscConfig+0x470>)
 800213a:	f023 0304 	bic.w	r3, r3, #4
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d015      	beq.n	8002174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7ff f87e 	bl	8001248 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7ff f87a 	bl	8001248 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0cb      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0ee      	beq.n	8002150 <HAL_RCC_OscConfig+0x334>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7ff f868 	bl	8001248 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7ff f864 	bl	8001248 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e0b5      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1ee      	bne.n	800217c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4a38      	ldr	r2, [pc, #224]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a1 	beq.w	80022fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ba:	4b34      	ldr	r3, [pc, #208]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d05c      	beq.n	8002280 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d141      	bne.n	8002252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff f838 	bl	8001248 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff f834 	bl	8001248 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e087      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x470>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	019b      	lsls	r3, r3, #6
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	3b01      	subs	r3, #1
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	491b      	ldr	r1, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff f80d 	bl	8001248 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002232:	f7ff f809 	bl	8001248 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e05c      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x416>
 8002250:	e054      	b.n	80022fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_RCC_OscConfig+0x478>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fff6 	bl	8001248 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fff2 	bl	8001248 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e045      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x470>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x444>
 800227e:	e03d      	b.n	80022fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e038      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000
 8002294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x4ec>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d028      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d121      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d11a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d111      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	3b01      	subs	r3, #1
 80022e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0cc      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d90c      	bls.n	8002348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800236a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	494d      	ldr	r1, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d044      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d119      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e067      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4934      	ldr	r1, [pc, #208]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7fe ff24 	bl	8001248 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7fe ff20 	bl	8001248 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e04f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d20c      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002492:	f000 f821 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002496:	4602      	mov	r2, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	490a      	ldr	r1, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	5ccb      	ldrb	r3, [r1, r3]
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fe84 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08004434 	.word	0x08004434
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024dc:	b094      	sub	sp, #80	; 0x50
 80024de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	647b      	str	r3, [r7, #68]	; 0x44
 80024e4:	2300      	movs	r3, #0
 80024e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e8:	2300      	movs	r3, #0
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f0:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d00d      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x40>
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	f200 80e1 	bhi.w	80026c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x34>
 8002506:	2b04      	cmp	r3, #4
 8002508:	d003      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x3a>
 800250a:	e0db      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800250c:	4b73      	ldr	r3, [pc, #460]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002510:	e0db      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002512:	4b72      	ldr	r3, [pc, #456]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 8002514:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002516:	e0d8      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002520:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002522:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252e:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	2200      	movs	r2, #0
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
 8002538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
 8002546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255c:	0150      	lsls	r0, r2, #5
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4621      	mov	r1, r4
 8002564:	1a51      	subs	r1, r2, r1
 8002566:	6139      	str	r1, [r7, #16]
 8002568:	4629      	mov	r1, r5
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800257c:	4659      	mov	r1, fp
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	4651      	mov	r1, sl
 8002582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002586:	4651      	mov	r1, sl
 8002588:	018a      	lsls	r2, r1, #6
 800258a:	4651      	mov	r1, sl
 800258c:	ebb2 0801 	subs.w	r8, r2, r1
 8002590:	4659      	mov	r1, fp
 8002592:	eb63 0901 	sbc.w	r9, r3, r1
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025aa:	4690      	mov	r8, r2
 80025ac:	4699      	mov	r9, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	eb18 0303 	adds.w	r3, r8, r3
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	462b      	mov	r3, r5
 80025b8:	eb49 0303 	adc.w	r3, r9, r3
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ca:	4629      	mov	r1, r5
 80025cc:	028b      	lsls	r3, r1, #10
 80025ce:	4621      	mov	r1, r4
 80025d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d4:	4621      	mov	r1, r4
 80025d6:	028a      	lsls	r2, r1, #10
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025de:	2200      	movs	r2, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025e8:	f7fd fe4a 	bl	8000280 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f4:	e058      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	2200      	movs	r2, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	4611      	mov	r1, r2
 8002602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	f04f 0000 	mov.w	r0, #0
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	0159      	lsls	r1, r3, #5
 800261e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002622:	0150      	lsls	r0, r2, #5
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4641      	mov	r1, r8
 800262a:	ebb2 0a01 	subs.w	sl, r2, r1
 800262e:	4649      	mov	r1, r9
 8002630:	eb63 0b01 	sbc.w	fp, r3, r1
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002648:	ebb2 040a 	subs.w	r4, r2, sl
 800264c:	eb63 050b 	sbc.w	r5, r3, fp
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	00eb      	lsls	r3, r5, #3
 800265a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265e:	00e2      	lsls	r2, r4, #3
 8002660:	4614      	mov	r4, r2
 8002662:	461d      	mov	r5, r3
 8002664:	4643      	mov	r3, r8
 8002666:	18e3      	adds	r3, r4, r3
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	464b      	mov	r3, r9
 800266c:	eb45 0303 	adc.w	r3, r5, r3
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800267e:	4629      	mov	r1, r5
 8002680:	028b      	lsls	r3, r1, #10
 8002682:	4621      	mov	r1, r4
 8002684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002688:	4621      	mov	r1, r4
 800268a:	028a      	lsls	r2, r1, #10
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002692:	2200      	movs	r2, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	61fa      	str	r2, [r7, #28]
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	f7fd fdf0 	bl	8000280 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4613      	mov	r3, r2
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3750      	adds	r7, #80	; 0x50
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	00f42400 	.word	0x00f42400

080026e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000000 	.word	0x20000000

080026f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026fc:	f7ff fff0 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0a9b      	lsrs	r3, r3, #10
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <HAL_RCC_GetPCLK1Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	08004444 	.word	0x08004444

08002720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002724:	f7ff ffdc 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0b5b      	lsrs	r3, r3, #13
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	08004444 	.word	0x08004444

08002748 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800274e:	f7fe fd7b 	bl	8001248 <HAL_GetTick>
 8002752:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002754:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a5c      	ldr	r2, [pc, #368]	; (80028cc <HAL_RCC_DeInit+0x184>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002762:	f7fe fd71 	bl	8001248 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e0a7      	b.n	80028c4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002774:	4b55      	ldr	r3, [pc, #340]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002780:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a51      	ldr	r2, [pc, #324]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800278c:	f7fe fd5c 	bl	8001248 <HAL_GetTick>
 8002790:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002792:	4b4e      	ldr	r3, [pc, #312]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279a:	f7fe fd55 	bl	8001248 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e089      	b.n	80028c4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80027b0:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_RCC_DeInit+0x184>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80027bc:	f7fe fd44 	bl	8001248 <HAL_GetTick>
 80027c0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80027c2:	4b42      	ldr	r3, [pc, #264]	; (80028cc <HAL_RCC_DeInit+0x184>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a41      	ldr	r2, [pc, #260]	; (80028cc <HAL_RCC_DeInit+0x184>)
 80027c8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80027cc:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fe fd3a 	bl	8001248 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e070      	b.n	80028c4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80027e2:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <HAL_RCC_DeInit+0x184>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80027ee:	f7fe fd2b 	bl	8001248 <HAL_GetTick>
 80027f2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <HAL_RCC_DeInit+0x184>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a34      	ldr	r2, [pc, #208]	; (80028cc <HAL_RCC_DeInit+0x184>)
 80027fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fe:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002802:	f7fe fd21 	bl	8001248 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e057      	b.n	80028c4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002814:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f0      	bne.n	8002802 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002820:	f7fe fd12 	bl	8001248 <HAL_GetTick>
 8002824:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002826:	4b29      	ldr	r3, [pc, #164]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a28      	ldr	r2, [pc, #160]	; (80028cc <HAL_RCC_DeInit+0x184>)
 800282c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002830:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002834:	f7fe fd08 	bl	8001248 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e03e      	b.n	80028c4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002854:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <HAL_RCC_DeInit+0x188>)
 8002856:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_RCC_DeInit+0x184>)
 800285a:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <HAL_RCC_DeInit+0x18c>)
 800285c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002866:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800286a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_RCC_DeInit+0x184>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4a16      	ldr	r2, [pc, #88]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002876:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_RCC_DeInit+0x184>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a13      	ldr	r2, [pc, #76]	; (80028cc <HAL_RCC_DeInit+0x184>)
 800287e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002882:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a10      	ldr	r2, [pc, #64]	; (80028cc <HAL_RCC_DeInit+0x184>)
 800288a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800288e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_RCC_DeInit+0x184>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_DeInit+0x184>)
 800289e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a0:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <HAL_RCC_DeInit+0x184>)
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_DeInit+0x190>)
 80028aa:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <HAL_RCC_DeInit+0x194>)
 80028ac:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_RCC_DeInit+0x198>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fc84 	bl	80011c0 <HAL_InitTick>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80028c2:	2300      	movs	r3, #0
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	04003010 	.word	0x04003010
 80028d4:	20003000 	.word	0x20003000
 80028d8:	20000000 	.word	0x20000000
 80028dc:	00f42400 	.word	0x00f42400
 80028e0:	20000004 	.word	0x20000004

080028e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e041      	b.n	800297a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fb14 	bl	8000f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 fac0 	bl	8002ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d001      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e044      	b.n	8002a26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <HAL_TIM_Base_Start_IT+0xb0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d018      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x6c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c6:	d013      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x6c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_TIM_Base_Start_IT+0xb4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00e      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x6c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_TIM_Base_Start_IT+0xb8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d009      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x6c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a17      	ldr	r2, [pc, #92]	; (8002a40 <HAL_TIM_Base_Start_IT+0xbc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d004      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x6c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <HAL_TIM_Base_Start_IT+0xc0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d111      	bne.n	8002a14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d010      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a12:	e007      	b.n	8002a24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000800 	.word	0x40000800
 8002a40:	40000c00 	.word	0x40000c00
 8002a44:	40014000 	.word	0x40014000

08002a48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6a1a      	ldr	r2, [r3, #32]
 8002a66:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10f      	bne.n	8002a90 <HAL_TIM_Base_Stop_IT+0x48>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6a1a      	ldr	r2, [r3, #32]
 8002a76:	f240 4344 	movw	r3, #1092	; 0x444
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d107      	bne.n	8002a90 <HAL_TIM_Base_Stop_IT+0x48>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d122      	bne.n	8002b02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d11b      	bne.n	8002b02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0202 	mvn.w	r2, #2
 8002ad2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f9bf 	bl	8002e6c <HAL_TIM_IC_CaptureCallback>
 8002aee:	e005      	b.n	8002afc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f9b1 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f9c2 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d122      	bne.n	8002b56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d11b      	bne.n	8002b56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f06f 0204 	mvn.w	r2, #4
 8002b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f995 	bl	8002e6c <HAL_TIM_IC_CaptureCallback>
 8002b42:	e005      	b.n	8002b50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f987 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f998 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d122      	bne.n	8002baa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d11b      	bne.n	8002baa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0208 	mvn.w	r2, #8
 8002b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f96b 	bl	8002e6c <HAL_TIM_IC_CaptureCallback>
 8002b96:	e005      	b.n	8002ba4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f95d 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f96e 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d122      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d11b      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0210 	mvn.w	r2, #16
 8002bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f941 	bl	8002e6c <HAL_TIM_IC_CaptureCallback>
 8002bea:	e005      	b.n	8002bf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f933 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f944 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10e      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0201 	mvn.w	r2, #1
 8002c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f90d 	bl	8002e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d10e      	bne.n	8002c56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b80      	cmp	r3, #128	; 0x80
 8002c44:	d107      	bne.n	8002c56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fabb 	bl	80031cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d10e      	bne.n	8002c82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d107      	bne.n	8002c82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f909 	bl	8002e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d10e      	bne.n	8002cae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d107      	bne.n	8002cae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f06f 0220 	mvn.w	r2, #32
 8002ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fa85 	bl	80031b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_TIM_ConfigClockSource+0x1c>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e0b4      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x186>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cf0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cf8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0a:	d03e      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0xd4>
 8002d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d10:	f200 8087 	bhi.w	8002e22 <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d18:	f000 8086 	beq.w	8002e28 <HAL_TIM_ConfigClockSource+0x172>
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d20:	d87f      	bhi.n	8002e22 <HAL_TIM_ConfigClockSource+0x16c>
 8002d22:	2b70      	cmp	r3, #112	; 0x70
 8002d24:	d01a      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0xa6>
 8002d26:	2b70      	cmp	r3, #112	; 0x70
 8002d28:	d87b      	bhi.n	8002e22 <HAL_TIM_ConfigClockSource+0x16c>
 8002d2a:	2b60      	cmp	r3, #96	; 0x60
 8002d2c:	d050      	beq.n	8002dd0 <HAL_TIM_ConfigClockSource+0x11a>
 8002d2e:	2b60      	cmp	r3, #96	; 0x60
 8002d30:	d877      	bhi.n	8002e22 <HAL_TIM_ConfigClockSource+0x16c>
 8002d32:	2b50      	cmp	r3, #80	; 0x50
 8002d34:	d03c      	beq.n	8002db0 <HAL_TIM_ConfigClockSource+0xfa>
 8002d36:	2b50      	cmp	r3, #80	; 0x50
 8002d38:	d873      	bhi.n	8002e22 <HAL_TIM_ConfigClockSource+0x16c>
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d058      	beq.n	8002df0 <HAL_TIM_ConfigClockSource+0x13a>
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d86f      	bhi.n	8002e22 <HAL_TIM_ConfigClockSource+0x16c>
 8002d42:	2b30      	cmp	r3, #48	; 0x30
 8002d44:	d064      	beq.n	8002e10 <HAL_TIM_ConfigClockSource+0x15a>
 8002d46:	2b30      	cmp	r3, #48	; 0x30
 8002d48:	d86b      	bhi.n	8002e22 <HAL_TIM_ConfigClockSource+0x16c>
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d060      	beq.n	8002e10 <HAL_TIM_ConfigClockSource+0x15a>
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d867      	bhi.n	8002e22 <HAL_TIM_ConfigClockSource+0x16c>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d05c      	beq.n	8002e10 <HAL_TIM_ConfigClockSource+0x15a>
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d05a      	beq.n	8002e10 <HAL_TIM_ConfigClockSource+0x15a>
 8002d5a:	e062      	b.n	8002e22 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6899      	ldr	r1, [r3, #8]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f000 f996 	bl	800309c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	609a      	str	r2, [r3, #8]
      break;
 8002d88:	e04f      	b.n	8002e2a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6899      	ldr	r1, [r3, #8]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f000 f97f 	bl	800309c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dac:	609a      	str	r2, [r3, #8]
      break;
 8002dae:	e03c      	b.n	8002e2a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f000 f8f3 	bl	8002fa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2150      	movs	r1, #80	; 0x50
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 f94c 	bl	8003066 <TIM_ITRx_SetConfig>
      break;
 8002dce:	e02c      	b.n	8002e2a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f000 f912 	bl	8003006 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2160      	movs	r1, #96	; 0x60
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f93c 	bl	8003066 <TIM_ITRx_SetConfig>
      break;
 8002dee:	e01c      	b.n	8002e2a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f000 f8d3 	bl	8002fa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2140      	movs	r1, #64	; 0x40
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f92c 	bl	8003066 <TIM_ITRx_SetConfig>
      break;
 8002e0e:	e00c      	b.n	8002e2a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 f923 	bl	8003066 <TIM_ITRx_SetConfig>
      break;
 8002e20:	e003      	b.n	8002e2a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      break;
 8002e26:	e000      	b.n	8002e2a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <TIM_Base_SetConfig+0xe4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00f      	beq.n	8002ee0 <TIM_Base_SetConfig+0x38>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_Base_SetConfig+0x38>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a31      	ldr	r2, [pc, #196]	; (8002f90 <TIM_Base_SetConfig+0xe8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <TIM_Base_SetConfig+0x38>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a30      	ldr	r2, [pc, #192]	; (8002f94 <TIM_Base_SetConfig+0xec>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_Base_SetConfig+0x38>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a2f      	ldr	r2, [pc, #188]	; (8002f98 <TIM_Base_SetConfig+0xf0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d108      	bne.n	8002ef2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <TIM_Base_SetConfig+0xe4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01b      	beq.n	8002f32 <TIM_Base_SetConfig+0x8a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d017      	beq.n	8002f32 <TIM_Base_SetConfig+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <TIM_Base_SetConfig+0xe8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a21      	ldr	r2, [pc, #132]	; (8002f94 <TIM_Base_SetConfig+0xec>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00f      	beq.n	8002f32 <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a20      	ldr	r2, [pc, #128]	; (8002f98 <TIM_Base_SetConfig+0xf0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1f      	ldr	r2, [pc, #124]	; (8002f9c <TIM_Base_SetConfig+0xf4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <TIM_Base_SetConfig+0xf8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d003      	beq.n	8002f32 <TIM_Base_SetConfig+0x8a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <TIM_Base_SetConfig+0xfc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d108      	bne.n	8002f44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <TIM_Base_SetConfig+0xe4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d103      	bne.n	8002f78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	615a      	str	r2, [r3, #20]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40014400 	.word	0x40014400
 8002fa4:	40014800 	.word	0x40014800

08002fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0201 	bic.w	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f023 030a 	bic.w	r3, r3, #10
 8002fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003006:	b480      	push	{r7}
 8003008:	b087      	sub	sp, #28
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f023 0210 	bic.w	r2, r3, #16
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	031b      	lsls	r3, r3, #12
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003042:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	621a      	str	r2, [r3, #32]
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	f043 0307 	orr.w	r3, r3, #7
 8003088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	021a      	lsls	r2, r3, #8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	431a      	orrs	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	609a      	str	r2, [r3, #8]
}
 80030d0:	bf00      	nop
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e050      	b.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1c      	ldr	r2, [pc, #112]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d018      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003140:	d013      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10c      	bne.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	4313      	orrs	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40014000 	.word	0x40014000

080031b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e03f      	b.n	8003272 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fd ff12 	bl	8001030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2224      	movs	r2, #36	; 0x24
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f9cb 	bl	80035c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b08a      	sub	sp, #40	; 0x28
 800327e:	af02      	add	r7, sp, #8
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b20      	cmp	r3, #32
 8003298:	d17c      	bne.n	8003394 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_UART_Transmit+0x2c>
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e075      	b.n	8003396 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_UART_Transmit+0x3e>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e06e      	b.n	8003396 <HAL_UART_Transmit+0x11c>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2221      	movs	r2, #33	; 0x21
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032ce:	f7fd ffbb 	bl	8001248 <HAL_GetTick>
 80032d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e8:	d108      	bne.n	80032fc <HAL_UART_Transmit+0x82>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	e003      	b.n	8003304 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800330c:	e02a      	b.n	8003364 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f8e2 	bl	80034e2 <UART_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e036      	b.n	8003396 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800333c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	3302      	adds	r3, #2
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	e007      	b.n	8003356 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	781a      	ldrb	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1cf      	bne.n	800330e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	2140      	movs	r1, #64	; 0x40
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f8b2 	bl	80034e2 <UART_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e006      	b.n	8003396 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b08a      	sub	sp, #40	; 0x28
 80033a2:	af02      	add	r7, sp, #8
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	f040 808c 	bne.w	80034d8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_UART_Receive+0x2e>
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e084      	b.n	80034da <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_UART_Receive+0x40>
 80033da:	2302      	movs	r3, #2
 80033dc:	e07d      	b.n	80034da <HAL_UART_Receive+0x13c>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2222      	movs	r2, #34	; 0x22
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fa:	f7fd ff25 	bl	8001248 <HAL_GetTick>
 80033fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d108      	bne.n	8003428 <HAL_UART_Receive+0x8a>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e003      	b.n	8003430 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003438:	e043      	b.n	80034c2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2120      	movs	r1, #32
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f84c 	bl	80034e2 <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e042      	b.n	80034da <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10c      	bne.n	8003474 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	b29b      	uxth	r3, r3
 8003462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003466:	b29a      	uxth	r2, r3
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	3302      	adds	r3, #2
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	e01f      	b.n	80034b4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347c:	d007      	beq.n	800348e <HAL_UART_Receive+0xf0>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_UART_Receive+0xfe>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	e008      	b.n	80034ae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3301      	adds	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1b6      	bne.n	800343a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e000      	b.n	80034da <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
  }
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b090      	sub	sp, #64	; 0x40
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f2:	e050      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d04c      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0x30>
 8003502:	f7fd fea1 	bl	8001248 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800350e:	429a      	cmp	r2, r3
 8003510:	d241      	bcs.n	8003596 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	330c      	adds	r3, #12
 8003530:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003532:	637a      	str	r2, [r7, #52]	; 0x34
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e5      	bne.n	8003512 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3314      	adds	r3, #20
 800354c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	613b      	str	r3, [r7, #16]
   return(result);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	63bb      	str	r3, [r7, #56]	; 0x38
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3314      	adds	r3, #20
 8003564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003566:	623a      	str	r2, [r7, #32]
 8003568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	69f9      	ldr	r1, [r7, #28]
 800356c:	6a3a      	ldr	r2, [r7, #32]
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	61bb      	str	r3, [r7, #24]
   return(result);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e5      	bne.n	8003546 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e00f      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d09f      	beq.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3740      	adds	r7, #64	; 0x40
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c4:	b0c0      	sub	sp, #256	; 0x100
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	68d9      	ldr	r1, [r3, #12]
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	ea40 0301 	orr.w	r3, r0, r1
 80035e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	431a      	orrs	r2, r3
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003618:	f021 010c 	bic.w	r1, r1, #12
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003626:	430b      	orrs	r3, r1
 8003628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363a:	6999      	ldr	r1, [r3, #24]
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	ea40 0301 	orr.w	r3, r0, r1
 8003646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b8f      	ldr	r3, [pc, #572]	; (800388c <UART_SetConfig+0x2cc>)
 8003650:	429a      	cmp	r2, r3
 8003652:	d005      	beq.n	8003660 <UART_SetConfig+0xa0>
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b8d      	ldr	r3, [pc, #564]	; (8003890 <UART_SetConfig+0x2d0>)
 800365c:	429a      	cmp	r2, r3
 800365e:	d104      	bne.n	800366a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003660:	f7ff f85e 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 8003664:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003668:	e003      	b.n	8003672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800366a:	f7ff f845 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 800366e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800367c:	f040 810c 	bne.w	8003898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003684:	2200      	movs	r2, #0
 8003686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800368a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800368e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003692:	4622      	mov	r2, r4
 8003694:	462b      	mov	r3, r5
 8003696:	1891      	adds	r1, r2, r2
 8003698:	65b9      	str	r1, [r7, #88]	; 0x58
 800369a:	415b      	adcs	r3, r3
 800369c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800369e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036a2:	4621      	mov	r1, r4
 80036a4:	eb12 0801 	adds.w	r8, r2, r1
 80036a8:	4629      	mov	r1, r5
 80036aa:	eb43 0901 	adc.w	r9, r3, r1
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c2:	4690      	mov	r8, r2
 80036c4:	4699      	mov	r9, r3
 80036c6:	4623      	mov	r3, r4
 80036c8:	eb18 0303 	adds.w	r3, r8, r3
 80036cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036d0:	462b      	mov	r3, r5
 80036d2:	eb49 0303 	adc.w	r3, r9, r3
 80036d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036ee:	460b      	mov	r3, r1
 80036f0:	18db      	adds	r3, r3, r3
 80036f2:	653b      	str	r3, [r7, #80]	; 0x50
 80036f4:	4613      	mov	r3, r2
 80036f6:	eb42 0303 	adc.w	r3, r2, r3
 80036fa:	657b      	str	r3, [r7, #84]	; 0x54
 80036fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003704:	f7fc fdbc 	bl	8000280 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4b61      	ldr	r3, [pc, #388]	; (8003894 <UART_SetConfig+0x2d4>)
 800370e:	fba3 2302 	umull	r2, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	011c      	lsls	r4, r3, #4
 8003716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800371a:	2200      	movs	r2, #0
 800371c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003720:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003728:	4642      	mov	r2, r8
 800372a:	464b      	mov	r3, r9
 800372c:	1891      	adds	r1, r2, r2
 800372e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003730:	415b      	adcs	r3, r3
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003738:	4641      	mov	r1, r8
 800373a:	eb12 0a01 	adds.w	sl, r2, r1
 800373e:	4649      	mov	r1, r9
 8003740:	eb43 0b01 	adc.w	fp, r3, r1
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003758:	4692      	mov	sl, r2
 800375a:	469b      	mov	fp, r3
 800375c:	4643      	mov	r3, r8
 800375e:	eb1a 0303 	adds.w	r3, sl, r3
 8003762:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003766:	464b      	mov	r3, r9
 8003768:	eb4b 0303 	adc.w	r3, fp, r3
 800376c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800377c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003784:	460b      	mov	r3, r1
 8003786:	18db      	adds	r3, r3, r3
 8003788:	643b      	str	r3, [r7, #64]	; 0x40
 800378a:	4613      	mov	r3, r2
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	647b      	str	r3, [r7, #68]	; 0x44
 8003792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800379a:	f7fc fd71 	bl	8000280 <__aeabi_uldivmod>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4611      	mov	r1, r2
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <UART_SetConfig+0x2d4>)
 80037a6:	fba3 2301 	umull	r2, r3, r3, r1
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2264      	movs	r2, #100	; 0x64
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	1acb      	subs	r3, r1, r3
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037ba:	4b36      	ldr	r3, [pc, #216]	; (8003894 <UART_SetConfig+0x2d4>)
 80037bc:	fba3 2302 	umull	r2, r3, r3, r2
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037c8:	441c      	add	r4, r3
 80037ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037dc:	4642      	mov	r2, r8
 80037de:	464b      	mov	r3, r9
 80037e0:	1891      	adds	r1, r2, r2
 80037e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80037e4:	415b      	adcs	r3, r3
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037ec:	4641      	mov	r1, r8
 80037ee:	1851      	adds	r1, r2, r1
 80037f0:	6339      	str	r1, [r7, #48]	; 0x30
 80037f2:	4649      	mov	r1, r9
 80037f4:	414b      	adcs	r3, r1
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003804:	4659      	mov	r1, fp
 8003806:	00cb      	lsls	r3, r1, #3
 8003808:	4651      	mov	r1, sl
 800380a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800380e:	4651      	mov	r1, sl
 8003810:	00ca      	lsls	r2, r1, #3
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	4603      	mov	r3, r0
 8003818:	4642      	mov	r2, r8
 800381a:	189b      	adds	r3, r3, r2
 800381c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003820:	464b      	mov	r3, r9
 8003822:	460a      	mov	r2, r1
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003838:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800383c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003840:	460b      	mov	r3, r1
 8003842:	18db      	adds	r3, r3, r3
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
 8003846:	4613      	mov	r3, r2
 8003848:	eb42 0303 	adc.w	r3, r2, r3
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003856:	f7fc fd13 	bl	8000280 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <UART_SetConfig+0x2d4>)
 8003860:	fba3 1302 	umull	r1, r3, r3, r2
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	2164      	movs	r1, #100	; 0x64
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	3332      	adds	r3, #50	; 0x32
 8003872:	4a08      	ldr	r2, [pc, #32]	; (8003894 <UART_SetConfig+0x2d4>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	f003 0207 	and.w	r2, r3, #7
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4422      	add	r2, r4
 8003886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003888:	e106      	b.n	8003a98 <UART_SetConfig+0x4d8>
 800388a:	bf00      	nop
 800388c:	40011000 	.word	0x40011000
 8003890:	40011400 	.word	0x40011400
 8003894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038aa:	4642      	mov	r2, r8
 80038ac:	464b      	mov	r3, r9
 80038ae:	1891      	adds	r1, r2, r2
 80038b0:	6239      	str	r1, [r7, #32]
 80038b2:	415b      	adcs	r3, r3
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
 80038b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ba:	4641      	mov	r1, r8
 80038bc:	1854      	adds	r4, r2, r1
 80038be:	4649      	mov	r1, r9
 80038c0:	eb43 0501 	adc.w	r5, r3, r1
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	00eb      	lsls	r3, r5, #3
 80038ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d2:	00e2      	lsls	r2, r4, #3
 80038d4:	4614      	mov	r4, r2
 80038d6:	461d      	mov	r5, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	18e3      	adds	r3, r4, r3
 80038dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038e0:	464b      	mov	r3, r9
 80038e2:	eb45 0303 	adc.w	r3, r5, r3
 80038e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003906:	4629      	mov	r1, r5
 8003908:	008b      	lsls	r3, r1, #2
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003910:	4621      	mov	r1, r4
 8003912:	008a      	lsls	r2, r1, #2
 8003914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003918:	f7fc fcb2 	bl	8000280 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4b60      	ldr	r3, [pc, #384]	; (8003aa4 <UART_SetConfig+0x4e4>)
 8003922:	fba3 2302 	umull	r2, r3, r3, r2
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	011c      	lsls	r4, r3, #4
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003934:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	61b9      	str	r1, [r7, #24]
 8003944:	415b      	adcs	r3, r3
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	6139      	str	r1, [r7, #16]
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003980:	464b      	mov	r3, r9
 8003982:	460a      	mov	r2, r1
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	67bb      	str	r3, [r7, #120]	; 0x78
 8003996:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039a4:	4649      	mov	r1, r9
 80039a6:	008b      	lsls	r3, r1, #2
 80039a8:	4641      	mov	r1, r8
 80039aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ae:	4641      	mov	r1, r8
 80039b0:	008a      	lsls	r2, r1, #2
 80039b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039b6:	f7fc fc63 	bl	8000280 <__aeabi_uldivmod>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <UART_SetConfig+0x4e4>)
 80039c2:	fba3 2301 	umull	r2, r3, r3, r1
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2264      	movs	r2, #100	; 0x64
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	1acb      	subs	r3, r1, r3
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	3332      	adds	r3, #50	; 0x32
 80039d4:	4a33      	ldr	r2, [pc, #204]	; (8003aa4 <UART_SetConfig+0x4e4>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e0:	441c      	add	r4, r3
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	673b      	str	r3, [r7, #112]	; 0x70
 80039ea:	677a      	str	r2, [r7, #116]	; 0x74
 80039ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	1891      	adds	r1, r2, r2
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	415b      	adcs	r3, r3
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a00:	4641      	mov	r1, r8
 8003a02:	1851      	adds	r1, r2, r1
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	4649      	mov	r1, r9
 8003a08:	414b      	adcs	r3, r1
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a18:	4659      	mov	r1, fp
 8003a1a:	00cb      	lsls	r3, r1, #3
 8003a1c:	4651      	mov	r1, sl
 8003a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a22:	4651      	mov	r1, sl
 8003a24:	00ca      	lsls	r2, r1, #3
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a32:	464b      	mov	r3, r9
 8003a34:	460a      	mov	r2, r1
 8003a36:	eb42 0303 	adc.w	r3, r2, r3
 8003a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	663b      	str	r3, [r7, #96]	; 0x60
 8003a46:	667a      	str	r2, [r7, #100]	; 0x64
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a54:	4649      	mov	r1, r9
 8003a56:	008b      	lsls	r3, r1, #2
 8003a58:	4641      	mov	r1, r8
 8003a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a5e:	4641      	mov	r1, r8
 8003a60:	008a      	lsls	r2, r1, #2
 8003a62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a66:	f7fc fc0b 	bl	8000280 <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <UART_SetConfig+0x4e4>)
 8003a70:	fba3 1302 	umull	r1, r3, r3, r2
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	2164      	movs	r1, #100	; 0x64
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	3332      	adds	r3, #50	; 0x32
 8003a82:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <UART_SetConfig+0x4e4>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4422      	add	r2, r4
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa4:	51eb851f 	.word	0x51eb851f

08003aa8 <_vsiprintf_r>:
 8003aa8:	b500      	push	{lr}
 8003aaa:	b09b      	sub	sp, #108	; 0x6c
 8003aac:	9100      	str	r1, [sp, #0]
 8003aae:	9104      	str	r1, [sp, #16]
 8003ab0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ab4:	9105      	str	r1, [sp, #20]
 8003ab6:	9102      	str	r1, [sp, #8]
 8003ab8:	4905      	ldr	r1, [pc, #20]	; (8003ad0 <_vsiprintf_r+0x28>)
 8003aba:	9103      	str	r1, [sp, #12]
 8003abc:	4669      	mov	r1, sp
 8003abe:	f000 f999 	bl	8003df4 <_svfiprintf_r>
 8003ac2:	9b00      	ldr	r3, [sp, #0]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	b01b      	add	sp, #108	; 0x6c
 8003aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ace:	bf00      	nop
 8003ad0:	ffff0208 	.word	0xffff0208

08003ad4 <vsiprintf>:
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	4601      	mov	r1, r0
 8003ada:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <vsiprintf+0x10>)
 8003adc:	6800      	ldr	r0, [r0, #0]
 8003ade:	f7ff bfe3 	b.w	8003aa8 <_vsiprintf_r>
 8003ae2:	bf00      	nop
 8003ae4:	20000058 	.word	0x20000058

08003ae8 <memset>:
 8003ae8:	4402      	add	r2, r0
 8003aea:	4603      	mov	r3, r0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d100      	bne.n	8003af2 <memset+0xa>
 8003af0:	4770      	bx	lr
 8003af2:	f803 1b01 	strb.w	r1, [r3], #1
 8003af6:	e7f9      	b.n	8003aec <memset+0x4>

08003af8 <__errno>:
 8003af8:	4b01      	ldr	r3, [pc, #4]	; (8003b00 <__errno+0x8>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000058 	.word	0x20000058

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4d0d      	ldr	r5, [pc, #52]	; (8003b3c <__libc_init_array+0x38>)
 8003b08:	4c0d      	ldr	r4, [pc, #52]	; (8003b40 <__libc_init_array+0x3c>)
 8003b0a:	1b64      	subs	r4, r4, r5
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	2600      	movs	r6, #0
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	4d0b      	ldr	r5, [pc, #44]	; (8003b44 <__libc_init_array+0x40>)
 8003b16:	4c0c      	ldr	r4, [pc, #48]	; (8003b48 <__libc_init_array+0x44>)
 8003b18:	f000 fc6a 	bl	80043f0 <_init>
 8003b1c:	1b64      	subs	r4, r4, r5
 8003b1e:	10a4      	asrs	r4, r4, #2
 8003b20:	2600      	movs	r6, #0
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	08004488 	.word	0x08004488
 8003b40:	08004488 	.word	0x08004488
 8003b44:	08004488 	.word	0x08004488
 8003b48:	0800448c 	.word	0x0800448c

08003b4c <__retarget_lock_acquire_recursive>:
 8003b4c:	4770      	bx	lr

08003b4e <__retarget_lock_release_recursive>:
 8003b4e:	4770      	bx	lr

08003b50 <_free_r>:
 8003b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b52:	2900      	cmp	r1, #0
 8003b54:	d044      	beq.n	8003be0 <_free_r+0x90>
 8003b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b5a:	9001      	str	r0, [sp, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8003b62:	bfb8      	it	lt
 8003b64:	18e4      	addlt	r4, r4, r3
 8003b66:	f000 f8df 	bl	8003d28 <__malloc_lock>
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <_free_r+0x94>)
 8003b6c:	9801      	ldr	r0, [sp, #4]
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	b933      	cbnz	r3, 8003b80 <_free_r+0x30>
 8003b72:	6063      	str	r3, [r4, #4]
 8003b74:	6014      	str	r4, [r2, #0]
 8003b76:	b003      	add	sp, #12
 8003b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b7c:	f000 b8da 	b.w	8003d34 <__malloc_unlock>
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	d908      	bls.n	8003b96 <_free_r+0x46>
 8003b84:	6825      	ldr	r5, [r4, #0]
 8003b86:	1961      	adds	r1, r4, r5
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	bf01      	itttt	eq
 8003b8c:	6819      	ldreq	r1, [r3, #0]
 8003b8e:	685b      	ldreq	r3, [r3, #4]
 8003b90:	1949      	addeq	r1, r1, r5
 8003b92:	6021      	streq	r1, [r4, #0]
 8003b94:	e7ed      	b.n	8003b72 <_free_r+0x22>
 8003b96:	461a      	mov	r2, r3
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	b10b      	cbz	r3, 8003ba0 <_free_r+0x50>
 8003b9c:	42a3      	cmp	r3, r4
 8003b9e:	d9fa      	bls.n	8003b96 <_free_r+0x46>
 8003ba0:	6811      	ldr	r1, [r2, #0]
 8003ba2:	1855      	adds	r5, r2, r1
 8003ba4:	42a5      	cmp	r5, r4
 8003ba6:	d10b      	bne.n	8003bc0 <_free_r+0x70>
 8003ba8:	6824      	ldr	r4, [r4, #0]
 8003baa:	4421      	add	r1, r4
 8003bac:	1854      	adds	r4, r2, r1
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	6011      	str	r1, [r2, #0]
 8003bb2:	d1e0      	bne.n	8003b76 <_free_r+0x26>
 8003bb4:	681c      	ldr	r4, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	6053      	str	r3, [r2, #4]
 8003bba:	440c      	add	r4, r1
 8003bbc:	6014      	str	r4, [r2, #0]
 8003bbe:	e7da      	b.n	8003b76 <_free_r+0x26>
 8003bc0:	d902      	bls.n	8003bc8 <_free_r+0x78>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	6003      	str	r3, [r0, #0]
 8003bc6:	e7d6      	b.n	8003b76 <_free_r+0x26>
 8003bc8:	6825      	ldr	r5, [r4, #0]
 8003bca:	1961      	adds	r1, r4, r5
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	bf04      	itt	eq
 8003bd0:	6819      	ldreq	r1, [r3, #0]
 8003bd2:	685b      	ldreq	r3, [r3, #4]
 8003bd4:	6063      	str	r3, [r4, #4]
 8003bd6:	bf04      	itt	eq
 8003bd8:	1949      	addeq	r1, r1, r5
 8003bda:	6021      	streq	r1, [r4, #0]
 8003bdc:	6054      	str	r4, [r2, #4]
 8003bde:	e7ca      	b.n	8003b76 <_free_r+0x26>
 8003be0:	b003      	add	sp, #12
 8003be2:	bd30      	pop	{r4, r5, pc}
 8003be4:	20000388 	.word	0x20000388

08003be8 <sbrk_aligned>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	4e0e      	ldr	r6, [pc, #56]	; (8003c24 <sbrk_aligned+0x3c>)
 8003bec:	460c      	mov	r4, r1
 8003bee:	6831      	ldr	r1, [r6, #0]
 8003bf0:	4605      	mov	r5, r0
 8003bf2:	b911      	cbnz	r1, 8003bfa <sbrk_aligned+0x12>
 8003bf4:	f000 fba6 	bl	8004344 <_sbrk_r>
 8003bf8:	6030      	str	r0, [r6, #0]
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f000 fba1 	bl	8004344 <_sbrk_r>
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	d00a      	beq.n	8003c1c <sbrk_aligned+0x34>
 8003c06:	1cc4      	adds	r4, r0, #3
 8003c08:	f024 0403 	bic.w	r4, r4, #3
 8003c0c:	42a0      	cmp	r0, r4
 8003c0e:	d007      	beq.n	8003c20 <sbrk_aligned+0x38>
 8003c10:	1a21      	subs	r1, r4, r0
 8003c12:	4628      	mov	r0, r5
 8003c14:	f000 fb96 	bl	8004344 <_sbrk_r>
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d101      	bne.n	8003c20 <sbrk_aligned+0x38>
 8003c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c20:	4620      	mov	r0, r4
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	2000038c 	.word	0x2000038c

08003c28 <_malloc_r>:
 8003c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c2c:	1ccd      	adds	r5, r1, #3
 8003c2e:	f025 0503 	bic.w	r5, r5, #3
 8003c32:	3508      	adds	r5, #8
 8003c34:	2d0c      	cmp	r5, #12
 8003c36:	bf38      	it	cc
 8003c38:	250c      	movcc	r5, #12
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	db01      	blt.n	8003c44 <_malloc_r+0x1c>
 8003c40:	42a9      	cmp	r1, r5
 8003c42:	d905      	bls.n	8003c50 <_malloc_r+0x28>
 8003c44:	230c      	movs	r3, #12
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	2600      	movs	r6, #0
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d24 <_malloc_r+0xfc>
 8003c54:	f000 f868 	bl	8003d28 <__malloc_lock>
 8003c58:	f8d8 3000 	ldr.w	r3, [r8]
 8003c5c:	461c      	mov	r4, r3
 8003c5e:	bb5c      	cbnz	r4, 8003cb8 <_malloc_r+0x90>
 8003c60:	4629      	mov	r1, r5
 8003c62:	4638      	mov	r0, r7
 8003c64:	f7ff ffc0 	bl	8003be8 <sbrk_aligned>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	d155      	bne.n	8003d1a <_malloc_r+0xf2>
 8003c6e:	f8d8 4000 	ldr.w	r4, [r8]
 8003c72:	4626      	mov	r6, r4
 8003c74:	2e00      	cmp	r6, #0
 8003c76:	d145      	bne.n	8003d04 <_malloc_r+0xdc>
 8003c78:	2c00      	cmp	r4, #0
 8003c7a:	d048      	beq.n	8003d0e <_malloc_r+0xe6>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4638      	mov	r0, r7
 8003c82:	eb04 0903 	add.w	r9, r4, r3
 8003c86:	f000 fb5d 	bl	8004344 <_sbrk_r>
 8003c8a:	4581      	cmp	r9, r0
 8003c8c:	d13f      	bne.n	8003d0e <_malloc_r+0xe6>
 8003c8e:	6821      	ldr	r1, [r4, #0]
 8003c90:	1a6d      	subs	r5, r5, r1
 8003c92:	4629      	mov	r1, r5
 8003c94:	4638      	mov	r0, r7
 8003c96:	f7ff ffa7 	bl	8003be8 <sbrk_aligned>
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d037      	beq.n	8003d0e <_malloc_r+0xe6>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	442b      	add	r3, r5
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d038      	beq.n	8003d1e <_malloc_r+0xf6>
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	42a2      	cmp	r2, r4
 8003cb0:	d12b      	bne.n	8003d0a <_malloc_r+0xe2>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	e00f      	b.n	8003cd8 <_malloc_r+0xb0>
 8003cb8:	6822      	ldr	r2, [r4, #0]
 8003cba:	1b52      	subs	r2, r2, r5
 8003cbc:	d41f      	bmi.n	8003cfe <_malloc_r+0xd6>
 8003cbe:	2a0b      	cmp	r2, #11
 8003cc0:	d917      	bls.n	8003cf2 <_malloc_r+0xca>
 8003cc2:	1961      	adds	r1, r4, r5
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	6025      	str	r5, [r4, #0]
 8003cc8:	bf18      	it	ne
 8003cca:	6059      	strne	r1, [r3, #4]
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	bf08      	it	eq
 8003cd0:	f8c8 1000 	streq.w	r1, [r8]
 8003cd4:	5162      	str	r2, [r4, r5]
 8003cd6:	604b      	str	r3, [r1, #4]
 8003cd8:	4638      	mov	r0, r7
 8003cda:	f104 060b 	add.w	r6, r4, #11
 8003cde:	f000 f829 	bl	8003d34 <__malloc_unlock>
 8003ce2:	f026 0607 	bic.w	r6, r6, #7
 8003ce6:	1d23      	adds	r3, r4, #4
 8003ce8:	1af2      	subs	r2, r6, r3
 8003cea:	d0ae      	beq.n	8003c4a <_malloc_r+0x22>
 8003cec:	1b9b      	subs	r3, r3, r6
 8003cee:	50a3      	str	r3, [r4, r2]
 8003cf0:	e7ab      	b.n	8003c4a <_malloc_r+0x22>
 8003cf2:	42a3      	cmp	r3, r4
 8003cf4:	6862      	ldr	r2, [r4, #4]
 8003cf6:	d1dd      	bne.n	8003cb4 <_malloc_r+0x8c>
 8003cf8:	f8c8 2000 	str.w	r2, [r8]
 8003cfc:	e7ec      	b.n	8003cd8 <_malloc_r+0xb0>
 8003cfe:	4623      	mov	r3, r4
 8003d00:	6864      	ldr	r4, [r4, #4]
 8003d02:	e7ac      	b.n	8003c5e <_malloc_r+0x36>
 8003d04:	4634      	mov	r4, r6
 8003d06:	6876      	ldr	r6, [r6, #4]
 8003d08:	e7b4      	b.n	8003c74 <_malloc_r+0x4c>
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	e7cc      	b.n	8003ca8 <_malloc_r+0x80>
 8003d0e:	230c      	movs	r3, #12
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4638      	mov	r0, r7
 8003d14:	f000 f80e 	bl	8003d34 <__malloc_unlock>
 8003d18:	e797      	b.n	8003c4a <_malloc_r+0x22>
 8003d1a:	6025      	str	r5, [r4, #0]
 8003d1c:	e7dc      	b.n	8003cd8 <_malloc_r+0xb0>
 8003d1e:	605b      	str	r3, [r3, #4]
 8003d20:	deff      	udf	#255	; 0xff
 8003d22:	bf00      	nop
 8003d24:	20000388 	.word	0x20000388

08003d28 <__malloc_lock>:
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <__malloc_lock+0x8>)
 8003d2a:	f7ff bf0f 	b.w	8003b4c <__retarget_lock_acquire_recursive>
 8003d2e:	bf00      	nop
 8003d30:	20000384 	.word	0x20000384

08003d34 <__malloc_unlock>:
 8003d34:	4801      	ldr	r0, [pc, #4]	; (8003d3c <__malloc_unlock+0x8>)
 8003d36:	f7ff bf0a 	b.w	8003b4e <__retarget_lock_release_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	20000384 	.word	0x20000384

08003d40 <__ssputs_r>:
 8003d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d44:	688e      	ldr	r6, [r1, #8]
 8003d46:	461f      	mov	r7, r3
 8003d48:	42be      	cmp	r6, r7
 8003d4a:	680b      	ldr	r3, [r1, #0]
 8003d4c:	4682      	mov	sl, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4690      	mov	r8, r2
 8003d52:	d82c      	bhi.n	8003dae <__ssputs_r+0x6e>
 8003d54:	898a      	ldrh	r2, [r1, #12]
 8003d56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d5a:	d026      	beq.n	8003daa <__ssputs_r+0x6a>
 8003d5c:	6965      	ldr	r5, [r4, #20]
 8003d5e:	6909      	ldr	r1, [r1, #16]
 8003d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d64:	eba3 0901 	sub.w	r9, r3, r1
 8003d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d6c:	1c7b      	adds	r3, r7, #1
 8003d6e:	444b      	add	r3, r9
 8003d70:	106d      	asrs	r5, r5, #1
 8003d72:	429d      	cmp	r5, r3
 8003d74:	bf38      	it	cc
 8003d76:	461d      	movcc	r5, r3
 8003d78:	0553      	lsls	r3, r2, #21
 8003d7a:	d527      	bpl.n	8003dcc <__ssputs_r+0x8c>
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	f7ff ff53 	bl	8003c28 <_malloc_r>
 8003d82:	4606      	mov	r6, r0
 8003d84:	b360      	cbz	r0, 8003de0 <__ssputs_r+0xa0>
 8003d86:	6921      	ldr	r1, [r4, #16]
 8003d88:	464a      	mov	r2, r9
 8003d8a:	f000 faeb 	bl	8004364 <memcpy>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	6126      	str	r6, [r4, #16]
 8003d9c:	6165      	str	r5, [r4, #20]
 8003d9e:	444e      	add	r6, r9
 8003da0:	eba5 0509 	sub.w	r5, r5, r9
 8003da4:	6026      	str	r6, [r4, #0]
 8003da6:	60a5      	str	r5, [r4, #8]
 8003da8:	463e      	mov	r6, r7
 8003daa:	42be      	cmp	r6, r7
 8003dac:	d900      	bls.n	8003db0 <__ssputs_r+0x70>
 8003dae:	463e      	mov	r6, r7
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	4632      	mov	r2, r6
 8003db4:	4641      	mov	r1, r8
 8003db6:	f000 faab 	bl	8004310 <memmove>
 8003dba:	68a3      	ldr	r3, [r4, #8]
 8003dbc:	1b9b      	subs	r3, r3, r6
 8003dbe:	60a3      	str	r3, [r4, #8]
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	4433      	add	r3, r6
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dcc:	462a      	mov	r2, r5
 8003dce:	f000 fad7 	bl	8004380 <_realloc_r>
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d1e0      	bne.n	8003d9a <__ssputs_r+0x5a>
 8003dd8:	6921      	ldr	r1, [r4, #16]
 8003dda:	4650      	mov	r0, sl
 8003ddc:	f7ff feb8 	bl	8003b50 <_free_r>
 8003de0:	230c      	movs	r3, #12
 8003de2:	f8ca 3000 	str.w	r3, [sl]
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dec:	81a3      	strh	r3, [r4, #12]
 8003dee:	f04f 30ff 	mov.w	r0, #4294967295
 8003df2:	e7e9      	b.n	8003dc8 <__ssputs_r+0x88>

08003df4 <_svfiprintf_r>:
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	4698      	mov	r8, r3
 8003dfa:	898b      	ldrh	r3, [r1, #12]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	b09d      	sub	sp, #116	; 0x74
 8003e00:	4607      	mov	r7, r0
 8003e02:	460d      	mov	r5, r1
 8003e04:	4614      	mov	r4, r2
 8003e06:	d50e      	bpl.n	8003e26 <_svfiprintf_r+0x32>
 8003e08:	690b      	ldr	r3, [r1, #16]
 8003e0a:	b963      	cbnz	r3, 8003e26 <_svfiprintf_r+0x32>
 8003e0c:	2140      	movs	r1, #64	; 0x40
 8003e0e:	f7ff ff0b 	bl	8003c28 <_malloc_r>
 8003e12:	6028      	str	r0, [r5, #0]
 8003e14:	6128      	str	r0, [r5, #16]
 8003e16:	b920      	cbnz	r0, 8003e22 <_svfiprintf_r+0x2e>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	e0d0      	b.n	8003fc4 <_svfiprintf_r+0x1d0>
 8003e22:	2340      	movs	r3, #64	; 0x40
 8003e24:	616b      	str	r3, [r5, #20]
 8003e26:	2300      	movs	r3, #0
 8003e28:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2a:	2320      	movs	r3, #32
 8003e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e34:	2330      	movs	r3, #48	; 0x30
 8003e36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fdc <_svfiprintf_r+0x1e8>
 8003e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e3e:	f04f 0901 	mov.w	r9, #1
 8003e42:	4623      	mov	r3, r4
 8003e44:	469a      	mov	sl, r3
 8003e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e4a:	b10a      	cbz	r2, 8003e50 <_svfiprintf_r+0x5c>
 8003e4c:	2a25      	cmp	r2, #37	; 0x25
 8003e4e:	d1f9      	bne.n	8003e44 <_svfiprintf_r+0x50>
 8003e50:	ebba 0b04 	subs.w	fp, sl, r4
 8003e54:	d00b      	beq.n	8003e6e <_svfiprintf_r+0x7a>
 8003e56:	465b      	mov	r3, fp
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	f7ff ff6f 	bl	8003d40 <__ssputs_r>
 8003e62:	3001      	adds	r0, #1
 8003e64:	f000 80a9 	beq.w	8003fba <_svfiprintf_r+0x1c6>
 8003e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e6a:	445a      	add	r2, fp
 8003e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80a1 	beq.w	8003fba <_svfiprintf_r+0x1c6>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e82:	f10a 0a01 	add.w	sl, sl, #1
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	9307      	str	r3, [sp, #28]
 8003e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003e90:	4654      	mov	r4, sl
 8003e92:	2205      	movs	r2, #5
 8003e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e98:	4850      	ldr	r0, [pc, #320]	; (8003fdc <_svfiprintf_r+0x1e8>)
 8003e9a:	f7fc f9a1 	bl	80001e0 <memchr>
 8003e9e:	9a04      	ldr	r2, [sp, #16]
 8003ea0:	b9d8      	cbnz	r0, 8003eda <_svfiprintf_r+0xe6>
 8003ea2:	06d0      	lsls	r0, r2, #27
 8003ea4:	bf44      	itt	mi
 8003ea6:	2320      	movmi	r3, #32
 8003ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eac:	0711      	lsls	r1, r2, #28
 8003eae:	bf44      	itt	mi
 8003eb0:	232b      	movmi	r3, #43	; 0x2b
 8003eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eba:	2b2a      	cmp	r3, #42	; 0x2a
 8003ebc:	d015      	beq.n	8003eea <_svfiprintf_r+0xf6>
 8003ebe:	9a07      	ldr	r2, [sp, #28]
 8003ec0:	4654      	mov	r4, sl
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f04f 0c0a 	mov.w	ip, #10
 8003ec8:	4621      	mov	r1, r4
 8003eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ece:	3b30      	subs	r3, #48	; 0x30
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d94d      	bls.n	8003f70 <_svfiprintf_r+0x17c>
 8003ed4:	b1b0      	cbz	r0, 8003f04 <_svfiprintf_r+0x110>
 8003ed6:	9207      	str	r2, [sp, #28]
 8003ed8:	e014      	b.n	8003f04 <_svfiprintf_r+0x110>
 8003eda:	eba0 0308 	sub.w	r3, r0, r8
 8003ede:	fa09 f303 	lsl.w	r3, r9, r3
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	9304      	str	r3, [sp, #16]
 8003ee6:	46a2      	mov	sl, r4
 8003ee8:	e7d2      	b.n	8003e90 <_svfiprintf_r+0x9c>
 8003eea:	9b03      	ldr	r3, [sp, #12]
 8003eec:	1d19      	adds	r1, r3, #4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	9103      	str	r1, [sp, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bfbb      	ittet	lt
 8003ef6:	425b      	neglt	r3, r3
 8003ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8003efc:	9307      	strge	r3, [sp, #28]
 8003efe:	9307      	strlt	r3, [sp, #28]
 8003f00:	bfb8      	it	lt
 8003f02:	9204      	strlt	r2, [sp, #16]
 8003f04:	7823      	ldrb	r3, [r4, #0]
 8003f06:	2b2e      	cmp	r3, #46	; 0x2e
 8003f08:	d10c      	bne.n	8003f24 <_svfiprintf_r+0x130>
 8003f0a:	7863      	ldrb	r3, [r4, #1]
 8003f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0e:	d134      	bne.n	8003f7a <_svfiprintf_r+0x186>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	9203      	str	r2, [sp, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bfb8      	it	lt
 8003f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f20:	3402      	adds	r4, #2
 8003f22:	9305      	str	r3, [sp, #20]
 8003f24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003fec <_svfiprintf_r+0x1f8>
 8003f28:	7821      	ldrb	r1, [r4, #0]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	f7fc f957 	bl	80001e0 <memchr>
 8003f32:	b138      	cbz	r0, 8003f44 <_svfiprintf_r+0x150>
 8003f34:	9b04      	ldr	r3, [sp, #16]
 8003f36:	eba0 000a 	sub.w	r0, r0, sl
 8003f3a:	2240      	movs	r2, #64	; 0x40
 8003f3c:	4082      	lsls	r2, r0
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	3401      	adds	r4, #1
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f48:	4825      	ldr	r0, [pc, #148]	; (8003fe0 <_svfiprintf_r+0x1ec>)
 8003f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f4e:	2206      	movs	r2, #6
 8003f50:	f7fc f946 	bl	80001e0 <memchr>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d038      	beq.n	8003fca <_svfiprintf_r+0x1d6>
 8003f58:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <_svfiprintf_r+0x1f0>)
 8003f5a:	bb1b      	cbnz	r3, 8003fa4 <_svfiprintf_r+0x1b0>
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	3307      	adds	r3, #7
 8003f60:	f023 0307 	bic.w	r3, r3, #7
 8003f64:	3308      	adds	r3, #8
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6a:	4433      	add	r3, r6
 8003f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6e:	e768      	b.n	8003e42 <_svfiprintf_r+0x4e>
 8003f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f74:	460c      	mov	r4, r1
 8003f76:	2001      	movs	r0, #1
 8003f78:	e7a6      	b.n	8003ec8 <_svfiprintf_r+0xd4>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	3401      	adds	r4, #1
 8003f7e:	9305      	str	r3, [sp, #20]
 8003f80:	4619      	mov	r1, r3
 8003f82:	f04f 0c0a 	mov.w	ip, #10
 8003f86:	4620      	mov	r0, r4
 8003f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f8c:	3a30      	subs	r2, #48	; 0x30
 8003f8e:	2a09      	cmp	r2, #9
 8003f90:	d903      	bls.n	8003f9a <_svfiprintf_r+0x1a6>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0c6      	beq.n	8003f24 <_svfiprintf_r+0x130>
 8003f96:	9105      	str	r1, [sp, #20]
 8003f98:	e7c4      	b.n	8003f24 <_svfiprintf_r+0x130>
 8003f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e7f0      	b.n	8003f86 <_svfiprintf_r+0x192>
 8003fa4:	ab03      	add	r3, sp, #12
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	462a      	mov	r2, r5
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <_svfiprintf_r+0x1f4>)
 8003fac:	a904      	add	r1, sp, #16
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f3af 8000 	nop.w
 8003fb4:	1c42      	adds	r2, r0, #1
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	d1d6      	bne.n	8003f68 <_svfiprintf_r+0x174>
 8003fba:	89ab      	ldrh	r3, [r5, #12]
 8003fbc:	065b      	lsls	r3, r3, #25
 8003fbe:	f53f af2d 	bmi.w	8003e1c <_svfiprintf_r+0x28>
 8003fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc4:	b01d      	add	sp, #116	; 0x74
 8003fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fca:	ab03      	add	r3, sp, #12
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	462a      	mov	r2, r5
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <_svfiprintf_r+0x1f4>)
 8003fd2:	a904      	add	r1, sp, #16
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	f000 f879 	bl	80040cc <_printf_i>
 8003fda:	e7eb      	b.n	8003fb4 <_svfiprintf_r+0x1c0>
 8003fdc:	0800444c 	.word	0x0800444c
 8003fe0:	08004456 	.word	0x08004456
 8003fe4:	00000000 	.word	0x00000000
 8003fe8:	08003d41 	.word	0x08003d41
 8003fec:	08004452 	.word	0x08004452

08003ff0 <_printf_common>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	688a      	ldr	r2, [r1, #8]
 8003ffa:	690b      	ldr	r3, [r1, #16]
 8003ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004000:	4293      	cmp	r3, r2
 8004002:	bfb8      	it	lt
 8004004:	4613      	movlt	r3, r2
 8004006:	6033      	str	r3, [r6, #0]
 8004008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400c:	4607      	mov	r7, r0
 800400e:	460c      	mov	r4, r1
 8004010:	b10a      	cbz	r2, 8004016 <_printf_common+0x26>
 8004012:	3301      	adds	r3, #1
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	0699      	lsls	r1, r3, #26
 800401a:	bf42      	ittt	mi
 800401c:	6833      	ldrmi	r3, [r6, #0]
 800401e:	3302      	addmi	r3, #2
 8004020:	6033      	strmi	r3, [r6, #0]
 8004022:	6825      	ldr	r5, [r4, #0]
 8004024:	f015 0506 	ands.w	r5, r5, #6
 8004028:	d106      	bne.n	8004038 <_printf_common+0x48>
 800402a:	f104 0a19 	add.w	sl, r4, #25
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	6832      	ldr	r2, [r6, #0]
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	42ab      	cmp	r3, r5
 8004036:	dc26      	bgt.n	8004086 <_printf_common+0x96>
 8004038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800403c:	1e13      	subs	r3, r2, #0
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	bf18      	it	ne
 8004042:	2301      	movne	r3, #1
 8004044:	0692      	lsls	r2, r2, #26
 8004046:	d42b      	bmi.n	80040a0 <_printf_common+0xb0>
 8004048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800404c:	4649      	mov	r1, r9
 800404e:	4638      	mov	r0, r7
 8004050:	47c0      	blx	r8
 8004052:	3001      	adds	r0, #1
 8004054:	d01e      	beq.n	8004094 <_printf_common+0xa4>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	6922      	ldr	r2, [r4, #16]
 800405a:	f003 0306 	and.w	r3, r3, #6
 800405e:	2b04      	cmp	r3, #4
 8004060:	bf02      	ittt	eq
 8004062:	68e5      	ldreq	r5, [r4, #12]
 8004064:	6833      	ldreq	r3, [r6, #0]
 8004066:	1aed      	subeq	r5, r5, r3
 8004068:	68a3      	ldr	r3, [r4, #8]
 800406a:	bf0c      	ite	eq
 800406c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004070:	2500      	movne	r5, #0
 8004072:	4293      	cmp	r3, r2
 8004074:	bfc4      	itt	gt
 8004076:	1a9b      	subgt	r3, r3, r2
 8004078:	18ed      	addgt	r5, r5, r3
 800407a:	2600      	movs	r6, #0
 800407c:	341a      	adds	r4, #26
 800407e:	42b5      	cmp	r5, r6
 8004080:	d11a      	bne.n	80040b8 <_printf_common+0xc8>
 8004082:	2000      	movs	r0, #0
 8004084:	e008      	b.n	8004098 <_printf_common+0xa8>
 8004086:	2301      	movs	r3, #1
 8004088:	4652      	mov	r2, sl
 800408a:	4649      	mov	r1, r9
 800408c:	4638      	mov	r0, r7
 800408e:	47c0      	blx	r8
 8004090:	3001      	adds	r0, #1
 8004092:	d103      	bne.n	800409c <_printf_common+0xac>
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409c:	3501      	adds	r5, #1
 800409e:	e7c6      	b.n	800402e <_printf_common+0x3e>
 80040a0:	18e1      	adds	r1, r4, r3
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	2030      	movs	r0, #48	; 0x30
 80040a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040aa:	4422      	add	r2, r4
 80040ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040b4:	3302      	adds	r3, #2
 80040b6:	e7c7      	b.n	8004048 <_printf_common+0x58>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4622      	mov	r2, r4
 80040bc:	4649      	mov	r1, r9
 80040be:	4638      	mov	r0, r7
 80040c0:	47c0      	blx	r8
 80040c2:	3001      	adds	r0, #1
 80040c4:	d0e6      	beq.n	8004094 <_printf_common+0xa4>
 80040c6:	3601      	adds	r6, #1
 80040c8:	e7d9      	b.n	800407e <_printf_common+0x8e>
	...

080040cc <_printf_i>:
 80040cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d0:	7e0f      	ldrb	r7, [r1, #24]
 80040d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040d4:	2f78      	cmp	r7, #120	; 0x78
 80040d6:	4691      	mov	r9, r2
 80040d8:	4680      	mov	r8, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	469a      	mov	sl, r3
 80040de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040e2:	d807      	bhi.n	80040f4 <_printf_i+0x28>
 80040e4:	2f62      	cmp	r7, #98	; 0x62
 80040e6:	d80a      	bhi.n	80040fe <_printf_i+0x32>
 80040e8:	2f00      	cmp	r7, #0
 80040ea:	f000 80d4 	beq.w	8004296 <_printf_i+0x1ca>
 80040ee:	2f58      	cmp	r7, #88	; 0x58
 80040f0:	f000 80c0 	beq.w	8004274 <_printf_i+0x1a8>
 80040f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040fc:	e03a      	b.n	8004174 <_printf_i+0xa8>
 80040fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004102:	2b15      	cmp	r3, #21
 8004104:	d8f6      	bhi.n	80040f4 <_printf_i+0x28>
 8004106:	a101      	add	r1, pc, #4	; (adr r1, 800410c <_printf_i+0x40>)
 8004108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800410c:	08004165 	.word	0x08004165
 8004110:	08004179 	.word	0x08004179
 8004114:	080040f5 	.word	0x080040f5
 8004118:	080040f5 	.word	0x080040f5
 800411c:	080040f5 	.word	0x080040f5
 8004120:	080040f5 	.word	0x080040f5
 8004124:	08004179 	.word	0x08004179
 8004128:	080040f5 	.word	0x080040f5
 800412c:	080040f5 	.word	0x080040f5
 8004130:	080040f5 	.word	0x080040f5
 8004134:	080040f5 	.word	0x080040f5
 8004138:	0800427d 	.word	0x0800427d
 800413c:	080041a5 	.word	0x080041a5
 8004140:	08004237 	.word	0x08004237
 8004144:	080040f5 	.word	0x080040f5
 8004148:	080040f5 	.word	0x080040f5
 800414c:	0800429f 	.word	0x0800429f
 8004150:	080040f5 	.word	0x080040f5
 8004154:	080041a5 	.word	0x080041a5
 8004158:	080040f5 	.word	0x080040f5
 800415c:	080040f5 	.word	0x080040f5
 8004160:	0800423f 	.word	0x0800423f
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	602a      	str	r2, [r5, #0]
 800416c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004174:	2301      	movs	r3, #1
 8004176:	e09f      	b.n	80042b8 <_printf_i+0x1ec>
 8004178:	6820      	ldr	r0, [r4, #0]
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	0607      	lsls	r7, r0, #24
 800417e:	f103 0104 	add.w	r1, r3, #4
 8004182:	6029      	str	r1, [r5, #0]
 8004184:	d501      	bpl.n	800418a <_printf_i+0xbe>
 8004186:	681e      	ldr	r6, [r3, #0]
 8004188:	e003      	b.n	8004192 <_printf_i+0xc6>
 800418a:	0646      	lsls	r6, r0, #25
 800418c:	d5fb      	bpl.n	8004186 <_printf_i+0xba>
 800418e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004192:	2e00      	cmp	r6, #0
 8004194:	da03      	bge.n	800419e <_printf_i+0xd2>
 8004196:	232d      	movs	r3, #45	; 0x2d
 8004198:	4276      	negs	r6, r6
 800419a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800419e:	485a      	ldr	r0, [pc, #360]	; (8004308 <_printf_i+0x23c>)
 80041a0:	230a      	movs	r3, #10
 80041a2:	e012      	b.n	80041ca <_printf_i+0xfe>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	6820      	ldr	r0, [r4, #0]
 80041a8:	1d19      	adds	r1, r3, #4
 80041aa:	6029      	str	r1, [r5, #0]
 80041ac:	0605      	lsls	r5, r0, #24
 80041ae:	d501      	bpl.n	80041b4 <_printf_i+0xe8>
 80041b0:	681e      	ldr	r6, [r3, #0]
 80041b2:	e002      	b.n	80041ba <_printf_i+0xee>
 80041b4:	0641      	lsls	r1, r0, #25
 80041b6:	d5fb      	bpl.n	80041b0 <_printf_i+0xe4>
 80041b8:	881e      	ldrh	r6, [r3, #0]
 80041ba:	4853      	ldr	r0, [pc, #332]	; (8004308 <_printf_i+0x23c>)
 80041bc:	2f6f      	cmp	r7, #111	; 0x6f
 80041be:	bf0c      	ite	eq
 80041c0:	2308      	moveq	r3, #8
 80041c2:	230a      	movne	r3, #10
 80041c4:	2100      	movs	r1, #0
 80041c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ca:	6865      	ldr	r5, [r4, #4]
 80041cc:	60a5      	str	r5, [r4, #8]
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	bfa2      	ittt	ge
 80041d2:	6821      	ldrge	r1, [r4, #0]
 80041d4:	f021 0104 	bicge.w	r1, r1, #4
 80041d8:	6021      	strge	r1, [r4, #0]
 80041da:	b90e      	cbnz	r6, 80041e0 <_printf_i+0x114>
 80041dc:	2d00      	cmp	r5, #0
 80041de:	d04b      	beq.n	8004278 <_printf_i+0x1ac>
 80041e0:	4615      	mov	r5, r2
 80041e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80041e6:	fb03 6711 	mls	r7, r3, r1, r6
 80041ea:	5dc7      	ldrb	r7, [r0, r7]
 80041ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041f0:	4637      	mov	r7, r6
 80041f2:	42bb      	cmp	r3, r7
 80041f4:	460e      	mov	r6, r1
 80041f6:	d9f4      	bls.n	80041e2 <_printf_i+0x116>
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d10b      	bne.n	8004214 <_printf_i+0x148>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	07de      	lsls	r6, r3, #31
 8004200:	d508      	bpl.n	8004214 <_printf_i+0x148>
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	6861      	ldr	r1, [r4, #4]
 8004206:	4299      	cmp	r1, r3
 8004208:	bfde      	ittt	le
 800420a:	2330      	movle	r3, #48	; 0x30
 800420c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004214:	1b52      	subs	r2, r2, r5
 8004216:	6122      	str	r2, [r4, #16]
 8004218:	f8cd a000 	str.w	sl, [sp]
 800421c:	464b      	mov	r3, r9
 800421e:	aa03      	add	r2, sp, #12
 8004220:	4621      	mov	r1, r4
 8004222:	4640      	mov	r0, r8
 8004224:	f7ff fee4 	bl	8003ff0 <_printf_common>
 8004228:	3001      	adds	r0, #1
 800422a:	d14a      	bne.n	80042c2 <_printf_i+0x1f6>
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	b004      	add	sp, #16
 8004232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	f043 0320 	orr.w	r3, r3, #32
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	4833      	ldr	r0, [pc, #204]	; (800430c <_printf_i+0x240>)
 8004240:	2778      	movs	r7, #120	; 0x78
 8004242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	6829      	ldr	r1, [r5, #0]
 800424a:	061f      	lsls	r7, r3, #24
 800424c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004250:	d402      	bmi.n	8004258 <_printf_i+0x18c>
 8004252:	065f      	lsls	r7, r3, #25
 8004254:	bf48      	it	mi
 8004256:	b2b6      	uxthmi	r6, r6
 8004258:	07df      	lsls	r7, r3, #31
 800425a:	bf48      	it	mi
 800425c:	f043 0320 	orrmi.w	r3, r3, #32
 8004260:	6029      	str	r1, [r5, #0]
 8004262:	bf48      	it	mi
 8004264:	6023      	strmi	r3, [r4, #0]
 8004266:	b91e      	cbnz	r6, 8004270 <_printf_i+0x1a4>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	f023 0320 	bic.w	r3, r3, #32
 800426e:	6023      	str	r3, [r4, #0]
 8004270:	2310      	movs	r3, #16
 8004272:	e7a7      	b.n	80041c4 <_printf_i+0xf8>
 8004274:	4824      	ldr	r0, [pc, #144]	; (8004308 <_printf_i+0x23c>)
 8004276:	e7e4      	b.n	8004242 <_printf_i+0x176>
 8004278:	4615      	mov	r5, r2
 800427a:	e7bd      	b.n	80041f8 <_printf_i+0x12c>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	6826      	ldr	r6, [r4, #0]
 8004280:	6961      	ldr	r1, [r4, #20]
 8004282:	1d18      	adds	r0, r3, #4
 8004284:	6028      	str	r0, [r5, #0]
 8004286:	0635      	lsls	r5, r6, #24
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	d501      	bpl.n	8004290 <_printf_i+0x1c4>
 800428c:	6019      	str	r1, [r3, #0]
 800428e:	e002      	b.n	8004296 <_printf_i+0x1ca>
 8004290:	0670      	lsls	r0, r6, #25
 8004292:	d5fb      	bpl.n	800428c <_printf_i+0x1c0>
 8004294:	8019      	strh	r1, [r3, #0]
 8004296:	2300      	movs	r3, #0
 8004298:	6123      	str	r3, [r4, #16]
 800429a:	4615      	mov	r5, r2
 800429c:	e7bc      	b.n	8004218 <_printf_i+0x14c>
 800429e:	682b      	ldr	r3, [r5, #0]
 80042a0:	1d1a      	adds	r2, r3, #4
 80042a2:	602a      	str	r2, [r5, #0]
 80042a4:	681d      	ldr	r5, [r3, #0]
 80042a6:	6862      	ldr	r2, [r4, #4]
 80042a8:	2100      	movs	r1, #0
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7fb ff98 	bl	80001e0 <memchr>
 80042b0:	b108      	cbz	r0, 80042b6 <_printf_i+0x1ea>
 80042b2:	1b40      	subs	r0, r0, r5
 80042b4:	6060      	str	r0, [r4, #4]
 80042b6:	6863      	ldr	r3, [r4, #4]
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	2300      	movs	r3, #0
 80042bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c0:	e7aa      	b.n	8004218 <_printf_i+0x14c>
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	462a      	mov	r2, r5
 80042c6:	4649      	mov	r1, r9
 80042c8:	4640      	mov	r0, r8
 80042ca:	47d0      	blx	sl
 80042cc:	3001      	adds	r0, #1
 80042ce:	d0ad      	beq.n	800422c <_printf_i+0x160>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	079b      	lsls	r3, r3, #30
 80042d4:	d413      	bmi.n	80042fe <_printf_i+0x232>
 80042d6:	68e0      	ldr	r0, [r4, #12]
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	4298      	cmp	r0, r3
 80042dc:	bfb8      	it	lt
 80042de:	4618      	movlt	r0, r3
 80042e0:	e7a6      	b.n	8004230 <_printf_i+0x164>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4632      	mov	r2, r6
 80042e6:	4649      	mov	r1, r9
 80042e8:	4640      	mov	r0, r8
 80042ea:	47d0      	blx	sl
 80042ec:	3001      	adds	r0, #1
 80042ee:	d09d      	beq.n	800422c <_printf_i+0x160>
 80042f0:	3501      	adds	r5, #1
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	9903      	ldr	r1, [sp, #12]
 80042f6:	1a5b      	subs	r3, r3, r1
 80042f8:	42ab      	cmp	r3, r5
 80042fa:	dcf2      	bgt.n	80042e2 <_printf_i+0x216>
 80042fc:	e7eb      	b.n	80042d6 <_printf_i+0x20a>
 80042fe:	2500      	movs	r5, #0
 8004300:	f104 0619 	add.w	r6, r4, #25
 8004304:	e7f5      	b.n	80042f2 <_printf_i+0x226>
 8004306:	bf00      	nop
 8004308:	0800445d 	.word	0x0800445d
 800430c:	0800446e 	.word	0x0800446e

08004310 <memmove>:
 8004310:	4288      	cmp	r0, r1
 8004312:	b510      	push	{r4, lr}
 8004314:	eb01 0402 	add.w	r4, r1, r2
 8004318:	d902      	bls.n	8004320 <memmove+0x10>
 800431a:	4284      	cmp	r4, r0
 800431c:	4623      	mov	r3, r4
 800431e:	d807      	bhi.n	8004330 <memmove+0x20>
 8004320:	1e43      	subs	r3, r0, #1
 8004322:	42a1      	cmp	r1, r4
 8004324:	d008      	beq.n	8004338 <memmove+0x28>
 8004326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800432a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800432e:	e7f8      	b.n	8004322 <memmove+0x12>
 8004330:	4402      	add	r2, r0
 8004332:	4601      	mov	r1, r0
 8004334:	428a      	cmp	r2, r1
 8004336:	d100      	bne.n	800433a <memmove+0x2a>
 8004338:	bd10      	pop	{r4, pc}
 800433a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800433e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004342:	e7f7      	b.n	8004334 <memmove+0x24>

08004344 <_sbrk_r>:
 8004344:	b538      	push	{r3, r4, r5, lr}
 8004346:	4d06      	ldr	r5, [pc, #24]	; (8004360 <_sbrk_r+0x1c>)
 8004348:	2300      	movs	r3, #0
 800434a:	4604      	mov	r4, r0
 800434c:	4608      	mov	r0, r1
 800434e:	602b      	str	r3, [r5, #0]
 8004350:	f7fc fd5c 	bl	8000e0c <_sbrk>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_sbrk_r+0x1a>
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	b103      	cbz	r3, 800435e <_sbrk_r+0x1a>
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	20000380 	.word	0x20000380

08004364 <memcpy>:
 8004364:	440a      	add	r2, r1
 8004366:	4291      	cmp	r1, r2
 8004368:	f100 33ff 	add.w	r3, r0, #4294967295
 800436c:	d100      	bne.n	8004370 <memcpy+0xc>
 800436e:	4770      	bx	lr
 8004370:	b510      	push	{r4, lr}
 8004372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800437a:	4291      	cmp	r1, r2
 800437c:	d1f9      	bne.n	8004372 <memcpy+0xe>
 800437e:	bd10      	pop	{r4, pc}

08004380 <_realloc_r>:
 8004380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	4680      	mov	r8, r0
 8004386:	4614      	mov	r4, r2
 8004388:	460e      	mov	r6, r1
 800438a:	b921      	cbnz	r1, 8004396 <_realloc_r+0x16>
 800438c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004390:	4611      	mov	r1, r2
 8004392:	f7ff bc49 	b.w	8003c28 <_malloc_r>
 8004396:	b92a      	cbnz	r2, 80043a4 <_realloc_r+0x24>
 8004398:	f7ff fbda 	bl	8003b50 <_free_r>
 800439c:	4625      	mov	r5, r4
 800439e:	4628      	mov	r0, r5
 80043a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a4:	f000 f81b 	bl	80043de <_malloc_usable_size_r>
 80043a8:	4284      	cmp	r4, r0
 80043aa:	4607      	mov	r7, r0
 80043ac:	d802      	bhi.n	80043b4 <_realloc_r+0x34>
 80043ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043b2:	d812      	bhi.n	80043da <_realloc_r+0x5a>
 80043b4:	4621      	mov	r1, r4
 80043b6:	4640      	mov	r0, r8
 80043b8:	f7ff fc36 	bl	8003c28 <_malloc_r>
 80043bc:	4605      	mov	r5, r0
 80043be:	2800      	cmp	r0, #0
 80043c0:	d0ed      	beq.n	800439e <_realloc_r+0x1e>
 80043c2:	42bc      	cmp	r4, r7
 80043c4:	4622      	mov	r2, r4
 80043c6:	4631      	mov	r1, r6
 80043c8:	bf28      	it	cs
 80043ca:	463a      	movcs	r2, r7
 80043cc:	f7ff ffca 	bl	8004364 <memcpy>
 80043d0:	4631      	mov	r1, r6
 80043d2:	4640      	mov	r0, r8
 80043d4:	f7ff fbbc 	bl	8003b50 <_free_r>
 80043d8:	e7e1      	b.n	800439e <_realloc_r+0x1e>
 80043da:	4635      	mov	r5, r6
 80043dc:	e7df      	b.n	800439e <_realloc_r+0x1e>

080043de <_malloc_usable_size_r>:
 80043de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e2:	1f18      	subs	r0, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bfbc      	itt	lt
 80043e8:	580b      	ldrlt	r3, [r1, r0]
 80043ea:	18c0      	addlt	r0, r0, r3
 80043ec:	4770      	bx	lr
	...

080043f0 <_init>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr

080043fc <_fini>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr
